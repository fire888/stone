(function () {
  'use strict';

  var classCallCheck = function (instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };

  var createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var timerRound = null,
      timerMargin = null,
      timerWidth = null;

  var Ui = function () {

    /** INIT *********************************************************/

    function Ui() {
      classCallCheck(this, Ui);

      this.intervalAnimation = null;
      this.round = 0;
    }

    createClass(Ui, [{
      key: 'init',
      value: function init() {
        $('<div id="uiWrapper"></div>').appendTo('body');
        $('<div id="scoreWrapper"></div>').appendTo('#uiWrapper');
        $('<div id="score"></div>').appendTo('#scoreWrapper');
        $('<div id="enemyName" class="playersNames"></div>').appendTo('#score');
        $('<div id="playerName" class="playersNames"></div>').appendTo('#score');
        $('<div id="scores"></div>').appendTo('#score');
        $('<div id="result"></div>').appendTo('#score');
        $('<div id="fatality"></div>').appendTo('#score');

        $('<div id="buttonSearchWrapper"></div>').appendTo('body');
        $('<button id="buttonPlayWithBot" class="startPlay buttonsPrepearPlay"></button>').appendTo('#buttonSearchWrapper');
        $('<p class="buttonText" >Play with Bot</p>').appendTo('#buttonPlayWithBot');
        $('<button id="buttonSearch" class="startPlay buttonsPrepearPlay"></button>').appendTo('#buttonSearchWrapper');
        $('<p class="buttonText" >Search enemy</p>').appendTo('#buttonSearch');

        $('<div id="buttonSearchStopWrapper"></div>').appendTo('body');
        $('<button class="buttonsPrepearPlay" id="buttonSearchStop"></button>').appendTo('#buttonSearchStopWrapper');
        $('<p class="buttonText" >Stop search</p>').appendTo('#buttonSearchStop');
        $('#buttonSearchStop').hide();

        $("<div id='buttonsChoiceWrapper'></div>").appendTo("body");
        $("<button class='buttonsChoice' id='stone' value='stone'><img src='app/imgs/btnStone.png'/></button>").appendTo("#buttonsChoiceWrapper");
        $("<button class='buttonsChoice' id='scissors' value='scissors'><img src='app/imgs/btnSnipe.png'/></button>").appendTo("#buttonsChoiceWrapper");
        $("<button class='buttonsChoice' id='paper' value='paper'><img src='app/imgs/btnPaper.png'/></button>").appendTo("#buttonsChoiceWrapper");
        this.hideButtonsChoice();

        this.resizeUi();
      }
    }, {
      key: 'resizeUi',
      value: function resizeUi() {
        var h = window.innerHeight;
        var step = h / 20;
        $('#buttonSearchWrapper').css({ 'height': step * 4.0 + 'px' });
        $('#buttonSearchWrapperStop').css({ 'height': step * 1.8 + 'px' });
        $('.buttonsPrepearPlay').css({
          'width': step * 8.5 + 'px',
          'height': step * 1.3 + 'px'
        });
        $('#buttonSearch').css({
          'height': step * 2.3 + 'px'
        });
        $('.buttonText').css({
          'font-size': step * 0.5 + 'px'
        });
        $('#buttonsChoiceWrapper').css({ 'height': step * 2.5 + 'px' });
        $('.buttonsChoice').css({
          'width': step * 2.8 + 'px',
          'height': step * 2.3 + 'px'
        });
        $('#scoreWrapper').css({ 'width': step * 10 + 'px' });
        $('#score').css({
          'width': step * 7 + 'px',
          'margin-left': step * 7 + 'px',
          'margin-top': step * 0.7 + 'px'
        });
        $('.playersNames').css({
          'height': step * 1.1 + 'px',
          'font-size': step * 0.3 + 'px'
        });
        $('.namePl').css({
          'font-size': step * 0.5 + 'px'
        });
        timerWidth = step * 3;
        $('.roundTimer').css({
          'width': timerWidth + 'px',
          'height': step * 0.8 + 'px',
          'margin-top': step * 0.1 + 'px'
        });
        $('#timerLine').css({
          'width': timerWidth * 1.5 + 'px',
          'height': step + 'px'
        });
        $('#result').css({
          'font-size': step * 0.3 + 'px'
        });
        $('#fatalitySigns').css({
          'height': step * 0.8 + 'px'
        });
      }

      /** START GAME ***************************************************/

    }, {
      key: 'setConnectionMessage',
      value: function setConnectionMessage(name) {
        $('#playerName').html('you<br/><span class="namePl">' + name + '</span>');
        this.resizeUi();
      }
    }, {
      key: 'clickButtonSearchEnemy',
      value: function clickButtonSearchEnemy(updateGame) {
        var _this = this;

        $('#buttonSearch').click(function () {
          updateGame();
          _this.showButtonStopSearch();
          $('#enemyName').html('enemy searching ... ');
          _this.resizeUi();
        });
      }
    }, {
      key: 'initButtonStopSearchEnemy',
      value: function initButtonStopSearchEnemy(updateGame) {
        var _this2 = this;

        $('#buttonSearchStop').click(function () {
          updateGame();
          _this2.resizeUi();
        });
      }
    }, {
      key: 'setMessageSearchEnemy',
      value: function setMessageSearchEnemy(name) {
        $('#enemyName').html('enemy<br/><span class="namePl"> ' + name + '</span>');
        this.hideButtonStopSearch();
        this.resizeUi();
      }
    }, {
      key: 'showButtonSearch',
      value: function showButtonSearch() {
        $('.startPlay').show();
      }
    }, {
      key: 'hideButtonSearch',
      value: function hideButtonSearch() {
        $('.startPlay').hide();
      }
    }, {
      key: 'showButtonStopSearch',
      value: function showButtonStopSearch() {
        $('#buttonSearchStop').show();
      }
    }, {
      key: 'hideButtonStopSearch',
      value: function hideButtonStopSearch() {
        $('#buttonSearchStop').hide();
      }

      /* ROUND *********************************************************/

    }, {
      key: 'startAnimationRoundTimer',
      value: function startAnimationRoundTimer(t) {
        $('<div class="roundTimer" id="r' + this.round + '"></div>').appendTo('#scores');
        $('<div id="timerLine"></div>').appendTo('#r' + this.round);

        if (this.round > 6) {
          var delRound = this.round - 7;
          $('#r' + delRound).remove();
        }

        timerMargin = t;
        this.resizeUi();
        animationRoundTimer();
      }
    }, {
      key: 'clickButtonsChoiceHero',
      value: function clickButtonsChoiceHero(updateGame, isRedrawButtons) {
        var _this3 = this;

        $('.buttonsChoice').click(function (e) {
          if (isRedrawButtons()) {
            _this3.redrawChoiceButtons(e.target.value);
          }
          updateGame(e);
        });
      }
    }, {
      key: 'showButtonsChoice',
      value: function showButtonsChoice() {
        $('#buttonsChoiceWrapper').show();
      }
    }, {
      key: 'redrawChoiceButtons',
      value: function redrawChoiceButtons(vall) {
        if (vall === 'stone') {
          $('#scissors').html('<img src="app/imgs/btnSnipe_b.png"/>');
          $('#paper').html('<img src="app/imgs/btnPaper_b.png"/>');
        }
        if (vall === 'scissors') {
          $('#stone').html('<img src="app/imgs/btnStone_b.png"/>');
          $('#paper').html('<img src="app/imgs/btnPaper_b.png"/>');
        }
        if (vall == 'paper') {
          $('#stone').html('<img src="app/imgs/btnStone_b.png"/>');
          $('#scissors').html('<img src="app/imgs/btnSnipe_b.png"/>');
        }
        if (vall === 'show') {
          $('#stone').html('<img src="app/imgs/btnStone.png"/>');
          $('#scissors').html('<img src="app/imgs/btnSnipe.png"/>');
          $('#paper').html('<img src="app/imgs/btnPaper.png"/>');
        }
      }
    }, {
      key: 'hideButtonsChoice',
      value: function hideButtonsChoice() {
        $('#buttonsChoiceWrapper').hide();
      }
    }, {
      key: 'stopAnimationRoundTimer',
      value: function stopAnimationRoundTimer() {
        clearTimeout(timerRound);
      }
    }, {
      key: 'drawRoundResult',
      value: function drawRoundResult(lastRoundResult) {
        this.stopAnimationRoundTimer();
        $('#timerLine').remove();
        var myChoice = getChiocePict(lastRoundResult.myChoice);
        var enChoice = getChiocePict(lastRoundResult.enemyChoice);
        $('#r' + this.round).html(enChoice + ' <img src="app/imgs/points.png"> ' + myChoice);
        $('#r' + this.round).css({ 'background-color': getBackColor(lastRoundResult.winner) });
        this.round++;
      }

      /* END GAME ******************************************************/

    }, {
      key: 'setMessageStartFatality',
      value: function setMessageStartFatality(v) {
        if (v === 'me') {
          $('<div style="color: #dfa43c"><br/><br/>You WIN !<br/><br/></div>').appendTo('#result');
          $('<div style="color: #ff0000">Fatality:<br/><br/> </div>').appendTo('#fatality');
          $('<div id="fatalitySigns"></div>').appendTo('#fatality');
          this.resizeUi();
        }
        if (v === 'enemy') {
          $('<div style="color: #dfa43c"><br/><br/>You LOSE.<br/><br/></div>').appendTo('#result');
          $('<div style="color: #ff0000">Fatality...<br/><br/> </div>').appendTo('#fatality');
        }
      }
    }, {
      key: 'addValueFatality',
      value: function addValueFatality(val) {
        $(getChiocePict(val)).appendTo('#fatalitySigns');
      }
    }, {
      key: 'setMessage',
      value: function setMessage(mess) {
        var h = document.getElementById('result');
        if (h.innerHTML != '') return;
        $('#result').append('<br>' + mess + '</br>');
      }
    }, {
      key: 'removeFatalityBar',
      value: function removeFatalityBar() {
        $('#fatality').html('');
      }
    }, {
      key: 'clearScreen',
      value: function clearScreen() {
        clearTimeout(timerRound);
        $('#result').html('');
        $('#scores').html('');
        $('#enemyName').html('');
      }

      /** BOT FUNCTIONS ************************************************/

    }, {
      key: 'initButtonPlayWithBot',
      value: function initButtonPlayWithBot(updateGame) {
        $('#buttonPlayWithBot').click(function () {
          updateGame();
        });
      }
    }]);
    return Ui;
  }();

  /** FUNCTIONS ******************************************************/

  var animationRoundTimer = function animationRoundTimer() {
    var m = timerWidth - timerMargin / 7000 * timerWidth;
    $('#timerLine').css({ 'marginLeft': m + 'px' });
    timerMargin -= 100;
    timerRound = setTimeout(animationRoundTimer, 100);
  };

  var getChiocePict = function getChiocePict(v) {
    if (v == 'stone') return '<img src="app/imgs/btnStone.png"/>';
    if (v == 'scissors') return '<img src="app/imgs/btnSnipe.png"/>';
    if (v == 'paper') return '<img src="app/imgs/btnPaper.png"/>';
    if (v == 'timeout') return '<img src="app/imgs/btnStart.png"/>';
  };

  var getBackColor = function getBackColor(v) {
    if (v == 'me') return '#958d0d';
    if (v == 'enemy') return '#5e2208';
    if (v == 'draw') return '#404040';
  };

  var Client = function () {
    function Client() {
      classCallCheck(this, Client);

      this.responseError = function () {};
    }

    createClass(Client, [{
      key: 'getSignIfConnectFirst',
      value: function getSignIfConnectFirst(updateGame) {
        var _this = this;

        $.get('/api/session/hello').fail(function () {
          _this.responseError();
        }).done(function (result) {
          updateGame(result);
        });
      }
    }, {
      key: 'sendSignToFindEnemy',
      value: function sendSignToFindEnemy(updateGame) {
        var _this2 = this;

        $.post('/api/user/find-game').fail(function () {
          _this2.responseError();
        }).then(function (result) {
          updateGame(result);
        });
      }
    }, {
      key: 'getSignAboutUpdateGameResult',
      value: function getSignAboutUpdateGameResult(updateGame) {
        var _this3 = this;

        $.get('/api/game').fail(function () {
          _this3.responseError();
        }).done(function (results) {
          updateGame(results);
        });
      }
    }, {
      key: 'sendHeroChoice',
      value: function sendHeroChoice(choice, updateGame) {
        var _this4 = this;

        $.post('/api/game/move?choice=' + choice).fail(function () {
          _this4.responseError();
        }).then(function (result) {
          updateGame(result);
        });
      }
    }, {
      key: 'sendReadyForNextRound',
      value: function sendReadyForNextRound(updateGame) {
        var _this5 = this;

        $.post('/api/game/next-round').fail(function () {
          _this5.responseError();
        }).then(function (result) {
          updateGame(result);
        });
      }
    }, {
      key: 'postEnemyIsDisconnected',
      value: function postEnemyIsDisconnected() {
        var _this6 = this;

        $.post('/api/game/enemy-disconnected').fail(function () {
          _this6.responseError();
        }).then(function (result) {});
      }
    }, {
      key: 'postWinnerResultFatality',
      value: function postWinnerResultFatality(resultFatality, updateGame) {
        $.post('/api/game/fatality?is=' + resultFatality).then(function (result) {
          updateGame(result);
        });
      }
    }, {
      key: 'loserWaitResultFatality',
      value: function loserWaitResultFatality(updateGame) {
        $.post('/api/game/isFatalityDoneForLoser').then(function (result) {
          updateGame(result);
        });
      }
    }, {
      key: 'setFunctionResponseError',
      value: function setFunctionResponseError(func) {
        this.responseError = func;
      }
    }]);
    return Client;
  }();

  var renderer = void 0;

  var Ctx = function () {
    function Ctx() {
      classCallCheck(this, Ctx);

      renderer = new PIXI.CanvasRenderer(window.innerHeight * 0.6, window.innerHeight);
      document.body.appendChild(renderer.view);
      renderer.view.id = 'ctx';
      this.stage = new PIXI.Stage();

      this.step = null;
      this.scale = null;

      this.currentSpriteHero = null;
      this.currentSpriteEnemy = null;

      this.reckonWindowSize();
    }

    createClass(Ctx, [{
      key: 'loadAssets',
      value: function loadAssets(onInit) {
        var _this = this;

        PIXI.loader.add('app/imgs/signs.json').add('app/imgs/fat01.json').load(function () {
          _this.initAnimation(onInit);
        });
      }
    }, {
      key: 'initAnimation',
      value: function initAnimation(onInit) {

        var posXHero = this.step * 6;
        var posYHero = this.step * 11;
        var posXEnemy = this.step * 5;
        var posYEnemy = this.step * 7;

        /** ANIMATION WAIT */

        var framesWait = [];
        for (var i = 1; i < 8; i++) {
          var val = i < 10 ? '0' + i : i;
          framesWait.push(PIXI.Texture.fromFrame('wait' + val + '.png'));
        }

        this.waitHero = new PIXI.extras.AnimatedSprite(framesWait);
        this.waitHero.x = posXHero;
        this.waitHero.y = posYHero;
        this.waitHero.scale.set(this.scale, this.scale);
        this.waitHero.anchor.set(0.5);
        this.waitHero.animationSpeed = 0.12;

        this.waitEnemy = new PIXI.extras.AnimatedSprite(framesWait);
        this.waitEnemy.x = posXEnemy;
        this.waitEnemy.y = posYEnemy;
        this.waitEnemy.scale.set(this.scale, this.scale);
        this.waitEnemy.anchor.set(0.5);
        this.waitEnemy.rotation = Math.PI;
        this.waitEnemy.animationSpeed = 0.15;

        /** ANIMATION COMA */

        var framesComa = [];
        for (var _i = 1; _i < 11; _i++) {
          var _val = _i < 10 ? '0' + _i : _i;
          framesComa.push(PIXI.Texture.fromFrame('coma' + _val + '.png'));
        }

        this.comaHero = new PIXI.extras.AnimatedSprite(framesComa);
        this.comaHero.x = posXHero;
        this.comaHero.y = posYHero;
        this.comaHero.scale.set(this.scale, this.scale);
        this.comaHero.anchor.set(0.5);
        this.comaHero.animationSpeed = 0.12;

        this.comaEnemy = new PIXI.extras.AnimatedSprite(framesComa);
        this.comaEnemy.x = posXEnemy;
        this.comaEnemy.y = posYEnemy;
        this.comaEnemy.scale.set(this.scale, this.scale);
        this.comaEnemy.anchor.set(0.5);
        this.comaEnemy.rotation = Math.PI;
        this.comaEnemy.animationSpeed = 0.12;

        /** ANIMATION KULAK */

        var framesKulak = [];
        for (var _i2 = 1; _i2 < 7; _i2++) {
          var _val2 = _i2 < 10 ? '0' + _i2 : _i2;
          framesKulak.push(PIXI.Texture.fromFrame('choice' + _val2 + '.png'));
        }
        this.kulakHero = new PIXI.extras.AnimatedSprite(framesKulak);
        this.kulakHero.x = posXHero;
        this.kulakHero.y = posYHero;
        this.kulakHero.scale.set(this.scale, this.scale);
        this.kulakHero.anchor.set(0.5);
        this.kulakHero.animationSpeed = 0.12;

        this.kulakEnemy = new PIXI.extras.AnimatedSprite(framesKulak);
        this.kulakEnemy.x = posXEnemy;
        this.kulakEnemy.y = posYEnemy;
        this.kulakEnemy.scale.set(this.scale, this.scale);
        this.kulakEnemy.anchor.set(0.5);
        this.kulakEnemy.rotation = Math.PI;
        this.kulakEnemy.animationSpeed = 0.12;

        /** ANIMATION STONE */

        var framesStone = [];
        for (var _i3 = 1; _i3 < 4; _i3++) {
          var _val3 = _i3 < 10 ? '0' + _i3 : _i3;
          framesStone.push(PIXI.Texture.fromFrame('stone' + _val3 + '.png'));
        }
        this.stoneHero = new PIXI.extras.AnimatedSprite(framesStone);
        this.stoneHero.x = posXHero;
        this.stoneHero.y = posYHero;
        this.stoneHero.scale.set(this.scale, this.scale);
        this.stoneHero.anchor.set(0.5);
        this.stoneHero.animationSpeed = 0.05;
        this.stoneHero.loop = false;

        this.stoneEnemy = new PIXI.extras.AnimatedSprite(framesStone);
        this.stoneEnemy.x = posXEnemy;
        this.stoneEnemy.y = posYEnemy;
        this.stoneEnemy.scale.set(this.scale, this.scale);
        this.stoneEnemy.anchor.set(0.5);
        this.stoneEnemy.rotation = Math.PI;
        this.stoneEnemy.animationSpeed = 0.05;
        this.stoneEnemy.loop = false;

        /** ANIMATION PAPER */

        var framesPaper = [];
        for (var _i4 = 2; _i4 < 5; _i4++) {
          var _val4 = _i4 < 10 ? '0' + _i4 : _i4;
          framesPaper.push(PIXI.Texture.fromFrame('paper' + _val4 + '.png'));
        }
        this.paperHero = new PIXI.extras.AnimatedSprite(framesPaper);
        this.paperHero.x = posXHero;
        this.paperHero.y = posYHero;
        this.paperHero.scale.set(this.scale, this.scale);
        this.paperHero.anchor.set(0.5);
        this.paperHero.animationSpeed = 0.05;
        this.paperHero.loop = false;

        this.paperEnemy = new PIXI.extras.AnimatedSprite(framesPaper);
        this.paperEnemy.x = posXEnemy;
        this.paperEnemy.y = posYEnemy;
        this.paperEnemy.scale.set(this.scale, this.scale);
        this.paperEnemy.anchor.set(0.5);
        this.paperEnemy.rotation = Math.PI;
        this.paperEnemy.animationSpeed = 0.05;
        this.paperEnemy.loop = false;

        /** ANIMATION SCISSORS */

        var framesScissors = [];
        for (var _i5 = 2; _i5 < 5; _i5++) {
          var _val5 = _i5 < 10 ? '0' + _i5 : _i5;
          framesScissors.push(PIXI.Texture.fromFrame('scissors' + _val5 + '.png'));
        }
        this.scissorsHero = new PIXI.extras.AnimatedSprite(framesScissors);
        this.scissorsHero.x = posXHero;
        this.scissorsHero.y = posYHero;
        this.scissorsHero.scale.set(this.scale, this.scale);
        this.scissorsHero.anchor.set(0.5);
        this.scissorsHero.animationSpeed = 0.05;
        this.scissorsHero.loop = false;

        this.scissorsEnemy = new PIXI.extras.AnimatedSprite(framesScissors);
        this.scissorsEnemy.x = posXEnemy;
        this.scissorsEnemy.y = posYEnemy;
        this.scissorsEnemy.scale.set(this.scale, this.scale);
        this.scissorsEnemy.anchor.set(0.5);
        this.scissorsEnemy.rotation = Math.PI;
        this.scissorsEnemy.animationSpeed = 0.05;
        this.scissorsEnemy.loop = false;

        /** ANIMATION SIGNS */

        var goodSignFrame = [];
        goodSignFrame.push(PIXI.Texture.fromFrame('sign00.png'));
        goodSignFrame.push(PIXI.Texture.fromFrame('sign01.png'));
        goodSignFrame.push(PIXI.Texture.fromFrame('sign05.png'));
        goodSignFrame.push(PIXI.Texture.fromFrame('sign06.png'));
        goodSignFrame.push(PIXI.Texture.fromFrame('sign07.png'));
        goodSignFrame.push(PIXI.Texture.fromFrame('sign08.png'));

        this.signHeroGood = new PIXI.extras.AnimatedSprite(goodSignFrame);
        this.signHeroGood.x = posXHero;
        this.signHeroGood.y = posYHero;
        this.signHeroGood.scale.set(this.scale, this.scale);
        this.signHeroGood.anchor.set(0.5);
        this.signHeroGood.animationSpeed = 0;
        this.signHeroGood.loop = false;

        this.signEnemyGood = new PIXI.extras.AnimatedSprite(goodSignFrame);
        this.signEnemyGood.x = posXEnemy;
        this.signEnemyGood.y = posYEnemy;
        this.signEnemyGood.anchor.set(0.5);
        this.signEnemyGood.scale.set(this.scale, this.scale);
        this.signEnemyGood.rotation = Math.PI;
        this.signEnemyGood.animationSpeed = 0;
        this.signEnemyGood.loop = false;

        var badSignFrame = [];
        badSignFrame.push(PIXI.Texture.fromFrame('sign02.png'));
        badSignFrame.push(PIXI.Texture.fromFrame('sign03.png'));
        badSignFrame.push(PIXI.Texture.fromFrame('sign04.png'));
        badSignFrame.push(PIXI.Texture.fromFrame('sign09.png'));
        badSignFrame.push(PIXI.Texture.fromFrame('sign10.png'));
        badSignFrame.push(PIXI.Texture.fromFrame('sign11.png'));
        badSignFrame.push(PIXI.Texture.fromFrame('sign12.png'));

        this.signHeroBad = new PIXI.extras.AnimatedSprite(badSignFrame);
        this.signHeroBad.x = posXHero;
        this.signHeroBad.y = posYHero;
        this.signHeroBad.scale.set(this.scale, this.scale);
        this.signHeroBad.anchor.set(0.5);
        this.signHeroBad.animationSpeed = 0;
        this.signHeroBad.loop = false;

        this.signEnemyBad = new PIXI.extras.AnimatedSprite(badSignFrame);
        this.signEnemyBad.x = posXEnemy;
        this.signEnemyBad.y = posYEnemy;
        this.signEnemyBad.scale.set(this.scale, this.scale);
        this.signEnemyBad.anchor.set(0.5);
        this.signEnemyBad.rotation = Math.PI;
        this.signEnemyBad.animationSpeed = 0;
        this.signEnemyBad.loop = false;

        /** ANIMATION FATALITY */

        var framesFatality = [];
        for (var _i6 = 0; _i6 < 8; _i6++) {
          var _val6 = _i6 < 10 ? '0' + _i6 : _i6;
          framesFatality.push(PIXI.Texture.fromFrame('fat01_' + _val6 + '.png'));
        }
        this.fatality = new PIXI.extras.AnimatedSprite(framesFatality);
        this.fatality.x = this.step * 5;
        this.fatality.y = this.step * 10;
        this.fatality.scale.set(this.scale, this.scale);
        this.fatality.anchor.set(0.5);
        this.fatality.animationSpeed = 0.05;
        this.fatality.loop = false;

        this.reckonWindowSize();

        onInit();
      }
    }, {
      key: 'reckonWindowSize',
      value: function reckonWindowSize() {
        var l = window.innerHeight * 0.6;
        var h = window.innerHeight;
        renderer.view.style.height = l;
        renderer.view.style.width = h;
        renderer.resize(l, h);

        this.step = h / 20;
        this.scale = h / 1000 * 0.92;

        if (!this.waitHero) return;

        var posXHero = this.step * 6;
        var posYHero = this.step * 11;
        var posXEnemy = this.step * 5;
        var posYEnemy = this.step * 7;

        setSpriteXYScale(this.waitHero, posXHero, posYHero, this.scale);
        setSpriteXYScale(this.waitEnemy, posXEnemy, posYEnemy, this.scale);
        setSpriteXYScale(this.comaHero, posXHero, posYHero, this.scale);
        setSpriteXYScale(this.comaEnemy, posXEnemy, posYEnemy, this.scale);
        setSpriteXYScale(this.kulakHero, posXHero, posYHero, this.scale);
        setSpriteXYScale(this.kulakEnemy, posXEnemy, posYEnemy, this.scale);
        setSpriteXYScale(this.stoneHero, posXHero, posYHero, this.scale);
        setSpriteXYScale(this.stoneEnemy, posXEnemy, posYEnemy, this.scale);
        setSpriteXYScale(this.scissorsHero, posXHero, posYHero, this.scale);
        setSpriteXYScale(this.scissorsEnemy, posXEnemy, posYEnemy, this.scale);
        setSpriteXYScale(this.paperHero, posXHero, posYHero, this.scale);
        setSpriteXYScale(this.paperEnemy, posXEnemy, posYEnemy, this.scale);
        setSpriteXYScale(this.signHeroGood, posXHero, posYHero, this.scale);
        setSpriteXYScale(this.signEnemyGood, posXEnemy, posYEnemy, this.scale);
        setSpriteXYScale(this.signHeroBad, posXHero, posYHero, this.scale);
        setSpriteXYScale(this.signEnemyBad, posXEnemy, posYEnemy, this.scale);

        setSpriteXYScale(this.fatality, this.step * 5, this.step * 10, this.scale);
      }

      /** FUNCTIONS PREPEAR GAME ***************************************/

    }, {
      key: 'setStartSign',
      value: function setStartSign() {

        this.signHeroBad.gotoAndStop(Math.floor(Math.random() * 7));
        this.signHeroBad.x = this.step * 6;
        this.signHeroBad.y = this.step * 11;
        this.signHeroBad.scale.set(this.scale, this.scale);
        this.stage.addChild(this.signHeroBad);
      }
    }, {
      key: 'removeStartSign',
      value: function removeStartSign() {

        this.stage.removeChild(this.signHeroBad);
      }
    }, {
      key: 'startAnimationWait',
      value: function startAnimationWait(hero, enemy) {

        if (hero) {
          this.waitHero.play();
          this.stage.addChild(this.waitHero);
        }

        if (enemy) {
          this.waitEnemy.play();
          this.stage.addChild(this.waitEnemy);
        }
      }
    }, {
      key: 'removeAnimationWait',
      value: function removeAnimationWait(hero, enemy) {

        if (hero) {
          this.waitHero.stop();
          this.stage.removeChild(this.waitHero);
        }

        if (enemy) {
          this.waitEnemy.stop();
          this.stage.removeChild(this.waitEnemy);
        }
      }
    }, {
      key: 'prepearCanvasToFight',
      value: function prepearCanvasToFight(canvasReady) {
        var _this2 = this;

        this.addGoodSign(true, true);
        setTimeout(function () {
          _this2.canvasReadyToFight(canvasReady);
        }, 1500);
      }
    }, {
      key: 'canvasReadyToFight',
      value: function canvasReadyToFight(canvasReady) {

        this.removeGoodSign(true, true);
        canvasReady();
      }
    }, {
      key: 'addGoodSign',
      value: function addGoodSign(hero, enemy) {

        if (hero) {
          this.signHeroGood.gotoAndStop(Math.floor(Math.random() * 4 + 1));
          this.signHeroGood.x = this.step * 6;
          this.signHeroGood.y = this.step * 11;
          this.signHeroGood.scale.set(this.scale, this.scale);
          this.stage.addChild(this.signHeroGood);
        }
        if (enemy) {
          this.signEnemyGood.gotoAndStop(Math.floor(Math.random() * 4 + 1));
          this.stage.addChild(this.signEnemyGood);
        }
      }
    }, {
      key: 'removeGoodSign',
      value: function removeGoodSign(hero, enemy) {

        if (hero) {
          this.stage.removeChild(this.signHeroGood);
        }
        if (enemy) {
          this.stage.removeChild(this.signEnemyGood);
        }
      }
    }, {
      key: 'addBadSign',
      value: function addBadSign(hero, enemy) {

        if (hero) {
          this.signHeroBad.gotoAndStop(Math.floor(Math.random() * 7));
          this.stage.addChild(this.signHeroBad);
        }
        if (enemy) {
          this.signEnemyBad.gotoAndStop(Math.floor(Math.random() * 7));
          this.stage.addChild(this.signEnemyBad);
        }
      }
    }, {
      key: 'removeBadSign',
      value: function removeBadSign(hero, enemy) {

        if (hero) {
          this.stage.removeChild(this.signHeroBad);
        }
        if (enemy) {
          this.stage.removeChild(this.signEnemyBad);
        }
      }

      /** FUNCTIONS ROUND **********************************************/

    }, {
      key: 'startAnimationKulak',
      value: function startAnimationKulak(hero, enemy) {

        if (hero) {
          this.kulakHero.play();
          this.stage.addChild(this.kulakHero);
        }
        if (enemy) {
          this.kulakEnemy.play();
          this.stage.addChild(this.kulakEnemy);
        }
      }
    }, {
      key: 'stopAnimationKulak',
      value: function stopAnimationKulak(hero, enemy) {

        if (hero) {
          this.kulakHero.gotoAndStop(5);
        }
        if (enemy) {
          this.kulakEnemy.gotoAndStop(5);
        }
      }
    }, {
      key: 'removeAnimationKulak',
      value: function removeAnimationKulak(hero, enemy) {

        if (hero) {
          this.stage.removeChild(this.kulakHero);
        }
        if (enemy) {
          this.stage.removeChild(this.kulakEnemy);
        }
      }
    }, {
      key: 'drawPlayersChoices',
      value: function drawPlayersChoices(choices) {

        this.removeAnimationKulak(true, true);

        this.currentSpriteHero = this.getSprite(true, false, choices.myChoice);
        this.stage.addChild(this.currentSpriteHero);
        if (this.isSpritePlay(choices.myChoice)) {
          this.currentSpriteHero.play();
        } else {
          this.currentSpriteHero.gotoAndStop(1);
        }

        this.currentSpriteEnemy = this.getSprite(false, true, choices.enemyChoice);
        this.stage.addChild(this.currentSpriteEnemy);
        if (this.isSpritePlay(choices.enemyChoice)) {
          this.currentSpriteEnemy.play();
        } else {
          this.currentSpriteEnemy.gotoAndStop(1);
        }
      }
    }, {
      key: 'getSprite',
      value: function getSprite(hero, enemy, choice) {

        var sp = null;

        if (hero) {
          if (choice == 'stone') sp = this.stoneHero;
          if (choice == 'paper') sp = this.paperHero;
          if (choice == 'scissors') sp = this.scissorsHero;
          if (choice == 'timeout') sp = this.signHeroBad;
        }
        if (enemy) {
          if (choice == 'stone') sp = this.stoneEnemy;
          if (choice == 'paper') sp = this.paperEnemy;
          if (choice == 'scissors') sp = this.scissorsEnemy;
          if (choice == 'timeout') sp = this.signEnemyBad;
        }

        return sp;
      }
    }, {
      key: 'isSpritePlay',
      value: function isSpritePlay(choice) {

        if (choice == 'timeout') {
          return false;
        }
        return true;
      }
    }, {
      key: 'removePlayersChoices',
      value: function removePlayersChoices() {

        this.stage.removeChild(this.currentSpriteHero);
        this.stage.removeChild(this.currentSpriteEnemy);
      }

      /** FUNCTIONS FATALITY *******************************************/

    }, {
      key: 'startAnimationComa',
      value: function startAnimationComa(hero, enemy) {

        if (hero) {
          this.comaHero.play();
          this.stage.addChild(this.comaHero);
        }

        if (enemy) {
          this.comaEnemy.play();
          this.stage.addChild(this.comaEnemy);
        }
      }
    }, {
      key: 'stopAnimationComa',
      value: function stopAnimationComa(hero, enemy) {

        if (hero) {
          this.comaHero.stop();
          this.stage.removeChild(this.comaHero);
        }

        if (enemy) {
          this.comaEnemy.stop();
          this.stage.removeChild(this.comaEnemy);
        }
      }
    }, {
      key: 'startAnimationFatality',
      value: function startAnimationFatality(noRotation) {

        noRotation ? this.fatality.rotation = 0 : this.fatality.rotation = Math.PI;
        this.stage.addChild(this.fatality);
        this.fatality.gotoAndPlay(0);
      }
    }, {
      key: 'removeAnimationFatality',
      value: function removeAnimationFatality() {

        this.stage.removeChild(this.fatality);
      }

      /** DRAW EVERY FRAME ***********************************************/

    }, {
      key: 'drawFrame',
      value: function drawFrame() {
        var _this3 = this;

        renderer.render(this.stage);
        requestAnimationFrame(function () {
          _this3.drawFrame();
        });
      }
    }]);
    return Ctx;
  }();

  var setSpriteXYScale = function setSpriteXYScale(ob, x, y, sc) {
    ob.x = x;
    ob.y = y;
    ob.scale.set(sc, sc);
  };

  var ui = new Ui();
  var client = new Client();
  var ctx = new Ctx();

  /** GAME VARS ******************************************************/

  var timerFindEnemy = null,
      intervalListenChoiceEnemy = null,
      timerRound$1 = null,
      timerUpdateGameResult = null,
      timerEndFatality = null,
      gameStatus = 'none',
      // play | made-choice-and-wait | wait-choice-fatality | fatality
  // play-bot | made-choice-and-wait-bot | waite-fat-bot | fat-bot 
  randomFatalityHash = null,
      gooutBrowserTime = null;

  /** INIT GAME ******************************************************/

  var init = function init() {

    return new Promise(function (resolve) {
      ctx.loadAssets(resolve);
    }).then(function () {
      return new Promise(function (resolve) {
        ui.init();
        ctx.drawFrame();
        ctx.setStartSign();
        initButtonSearchEnemy();
        initButtonStopSearchEnemy();
        initButtonPlayWithBot();
        initErrorConnection();
        initGooutBrowserTabError();
        resolve();
      });
    }).then(function () {
      if (removeStartLoader) removeStartLoader();
      connectFirst();
    });
  };

  var initErrorConnection = function initErrorConnection() {

    client.setFunctionResponseError(function () {
      ui.setMessage('GAME DISCONNECTED');
      clearErrorScreen();
    });
  };

  var initGooutBrowserTabError = function initGooutBrowserTabError() {

    window.onblur = function () {
      if (gameStatus != 'play' || gameStatus != 'made-choice-and-wait') return;
      gooutBrowserTime = new Date();
    };
    window.onfocus = function () {
      if (gooutBrowserTime == null) return;
      if (new Date() - gooutBrowserTime > 200000) {
        gooutBrowserTime = null;
        clearErrorScreen();
        ctx.setStartSign();
        ui.showButtonSearch();
      }
    };
  };

  var clearErrorScreen = function clearErrorScreen() {

    ctx.removeBadSign(true, true);
    ctx.removeGoodSign(true, true);
    ctx.removeAnimationKulak(true, true);
    ctx.removeAnimationWait(true, true);
    ctx.removePlayersChoices();
    ctx.removeAnimationFatality();
    ui.hideButtonsChoice();
    clearAllTimers();
    endBattle();
  };

  var initButtonSearchEnemy = function initButtonSearchEnemy() {

    ui.clickButtonSearchEnemy(function () {
      initButtonsChoiceHero();
      ctx.removeGoodSign(true, false);
      ctx.removeBadSign(true, false);
      ctx.removeAnimationFatality();
      ctx.removeStartSign();
      ctx.startAnimationWait(true, false);
      ui.clearScreen();
      ui.hideButtonSearch();
      apiFindEnemy();
    });
  };

  var initButtonStopSearchEnemy = function initButtonStopSearchEnemy() {

    ui.initButtonStopSearchEnemy(function () {
      clearTimeout(timerFindEnemy);
      ui.hideButtonStopSearch();
      ui.showButtonSearch();
      ui.clearScreen();
      ctx.removeAnimationWait(true, false);
      ctx.setStartSign();
    });
  };

  /** START FUNCTIONS ************************************************/

  var connectFirst = function connectFirst() {

    client.getSignIfConnectFirst(function (serverResult) {
      ui.setConnectionMessage(serverResult.name);
    });
  };

  var apiFindEnemy = function apiFindEnemy() {

    client.sendSignToFindEnemy(function (serverResult) {
      if (serverResult.state === 'playing') {
        gameStatus = 'play';
        meetingPlayers();
      } else {
        timerFindEnemy = setTimeout(apiFindEnemy, 500);
      }
    });
  };

  var meetingPlayers = function meetingPlayers() {

    client.getSignAboutUpdateGameResult(function (serverResult) {
      ui.setMessageSearchEnemy(serverResult.enemy.name);
      ctx.removeAnimationWait(true, false);
      ctx.prepearCanvasToFight(function () {
        startRound();
      });
    });
  };

  /** FUNCTIONS PLAY ROUND *******************************************/

  var startRound = function startRound() {

    gameStatus = 'play';
    ui.hideButtonSearch();
    ui.startAnimationRoundTimer(7000);
    ui.redrawChoiceButtons('show');
    ui.showButtonsChoice();
    ctx.startAnimationKulak(true, true);

    intervalListenChoiceEnemy = setInterval(waitEnemyChoice, 1000);
    timerRound$1 = setTimeout(endTimerRound, 7000);
  };

  var waitEnemyChoice = function waitEnemyChoice() {

    client.getSignAboutUpdateGameResult(function (serverResult) {

      if (serverResult.enemyMadeChoice) {
        ctx.stopAnimationKulak(false, true);
        clearInterval(intervalListenChoiceEnemy);
      }
    });
  };

  var initButtonsChoiceHero = function initButtonsChoiceHero() {

    ui.clickButtonsChoiceHero(function (e) {
      if (gameStatus === 'play') {
        gameStatus = 'made-choice-and-wait';
        sendHeroChoice(e.target.value);
        return;
      }
      if (gameStatus === 'wait-choice-fatality') {
        checkFatalityDone(e.target.value);
      }
    }, isUpdadeButtonsImgs);
  };

  var isUpdadeButtonsImgs = function isUpdadeButtonsImgs() {

    if (gameStatus === 'play') return true;
    return false;
  };

  var sendHeroChoice = function sendHeroChoice(choice) {

    ctx.stopAnimationKulak(true, false);
    client.sendHeroChoice(choice, function (serverResult) {
      updateGameResult(serverResult);
    });
  };

  var endTimerRound = function endTimerRound() {

    clearInterval(intervalListenChoiceEnemy);
    client.sendHeroChoice('timeout', function (serverResult) {
      updateGameResult(serverResult);
    });
  };

  var updateGameResult = function updateGameResult(serverResult) {

    if (serverResult.state == 'oneOfPlayersDisconnected') {
      clearAllTimers();
      drawEnemyDisconnection();
      return;
    }
    if (serverResult.enemyMadeChoice) {
      clearAllTimers();

      ui.drawRoundResult(serverResult.results[serverResult.results.length - 1]);
      ctx.drawPlayersChoices(serverResult.results[serverResult.results.length - 1]);

      setTimeout(nextRound, 4000);
    } else {
      timerUpdateGameResult = setTimeout(function () {
        client.getSignAboutUpdateGameResult(function (serverResult) {
          updateGameResult(serverResult);
        });
      }, 500);
    }
  };

  var clearAllTimers = function clearAllTimers() {

    clearInterval(intervalListenChoiceEnemy);
    intervalListenChoiceEnemy = null;
    clearTimeout(timerUpdateGameResult);
    timerUpdateGameResult = null;
    clearTimeout(timerRound$1);
    timerRound$1 = null;
  };

  var nextRound = function nextRound() {

    client.sendReadyForNextRound(function (serverResult) {
      clearAllTimers();
      ctx.removePlayersChoices();
      ui.redrawChoiceButtons('show');
      if (serverResult.state === 'play' || serverResult.state === 'wait_ready') {
        startRound();
        return;
      }
      if (serverResult.state === 'wait_fatality') {
        startFatality(serverResult);
        return;
      }
      if (serverResult.state === 'over' || serverResult.state === 'fatality') {
        endBattle();
        return;
      }
    });
  };

  /** FUNCTIONS END GAME *********************************************/

  var drawEnemyDisconnection = function drawEnemyDisconnection() {

    client.postEnemyIsDisconnected();
    ui.setMessage('ENEMY RUN FROM BATTLE<br/>You WIN !');
    ui.hideButtonsChoice();
    ctx.stopAnimationKulak(true, true);
    ctx.removeAnimationKulak(true, true);
    ctx.removePlayersChoices();
    ctx.addGoodSign(true, false);
    endBattle();
  };

  var startFatality = function startFatality(serverResult) {

    gameStatus = 'wait-choice-fatality';
    if (serverResult.winner === 'me') {

      ui.setMessageStartFatality('me');
      ui.showButtonsChoice();
      ctx.startAnimationWait(true, false);
      ctx.startAnimationComa(false, true);

      makeHashFatality();

      timerEndFatality = setTimeout(function () {
        postWinnerResultFatality('miss');
      }, 8000);
    }
    if (serverResult.winner === 'enemy') {

      ui.hideButtonsChoice();
      ui.setMessageStartFatality('enemy');
      ctx.startAnimationWait(false, true);
      ctx.startAnimationComa(true, false);

      loserWaitResultFatality();

      timerEndFatality = setTimeout(function () {
        endFatality();
      }, 14000);
    }
  };

  var makeHashFatality = function makeHashFatality() {

    randomFatalityHash = [];
    for (var i = 0; i < 5; i++) {
      var n = Math.floor(Math.random() * 3);
      if (n == 0) {
        setValueInHash('stone');
      }
      if (n == 1) {
        setValueInHash('scissors');
      }
      if (n == 2) {
        setValueInHash('paper');
      }
    }
  };

  var setValueInHash = function setValueInHash(value) {

    randomFatalityHash.push(value);
    ui.addValueFatality(value);
  };

  var checkFatalityDone = function checkFatalityDone(choice) {

    if (choice == randomFatalityHash[0]) {
      randomFatalityHash.splice(0, 1);
      if (randomFatalityHash.length == 0) {
        postWinnerResultFatality('done');
      }
    } else {
      postWinnerResultFatality('miss');
    }
  };

  var postWinnerResultFatality = function postWinnerResultFatality(resultFatality) {

    client.postWinnerResultFatality(resultFatality, function (serverResult) {
      endFatality(serverResult);
    });
  };

  var loserWaitResultFatality = function loserWaitResultFatality() {

    client.loserWaitResultFatality(function (serverResult) {
      if (serverResult.fatality == 'none') {
        setTimeout(loserWaitResultFatality, 300);
      }
      if (serverResult.fatality != 'none') {
        endFatality(serverResult);
      }
    });
  };

  var endFatality = function endFatality(serverResult) {

    if (timerEndFatality !== null) {
      clearTimeout(timerEndFatality);
      timerEndFatality = null;
    }
    ctx.removeAnimationWait(true, true);
    ctx.stopAnimationComa(true, true);
    ui.hideButtonsChoice();
    if (serverResult) {
      if (serverResult.winner == 'me' && serverResult.fatality == 'done') {
        ctx.startAnimationFatality(true);
      }
      if (serverResult.winner == 'me' && serverResult.fatality == 'miss') {
        ctx.addBadSign(true, false);
        ctx.addGoodSign(false, true);
      }
      if (serverResult.winner == 'enemy' && serverResult.fatality == 'done') {
        ctx.startAnimationFatality(false);
      }
      if (serverResult.winner == 'enemy' && serverResult.fatality == 'miss') {
        ctx.addBadSign(false, true);
        ctx.addGoodSign(true, false);
      }
    }
    if (!serverResult) {
      ctx.addBadSign(false, true);
      ctx.addGoodSign(true, false);
    }
    ui.removeFatalityBar();
    endBattle();
  };

  var endBattle = function endBattle() {
    return setTimeout(clearEnemyFromScreen, 2000);
  };

  var clearEnemyFromScreen = function clearEnemyFromScreen() {

    gameStatus = 'none';
    ctx.removeGoodSign(false, true);
    ctx.removeBadSign(false, true);
    ui.showButtonSearch();
    connectFirst();
  };

  /** LOCAL BOT ******************************************************/

  var gameBot = null;

  var initButtonPlayWithBot = function initButtonPlayWithBot() {
    ui.initButtonPlayWithBot(function () {

      gameBot = {
        myChoice: null,
        enemyChoice: null,
        winner: null,
        enemyRoundChoiceTimer: null,
        results: [],
        fatality: null
      };

      initButtonsChoiceHeroBot();
      ui.clearScreen();
      ui.setMessageSearchEnemy('bot');
      ui.hideButtonSearch();
      ctx.removeGoodSign(true, false);
      ctx.removeBadSign(true, false);
      ctx.removeAnimationFatality();
      ctx.removeStartSign();
      ctx.prepearCanvasToFight(function () {
        startRoundBot();
      });
    });
  };

  var startRoundBot = function startRoundBot() {

    ctx.removePlayersChoices();
    gameStatus = 'play-bot';
    ui.startAnimationRoundTimer(7000);
    ui.redrawChoiceButtons('show');
    ui.showButtonsChoice();
    ctx.startAnimationKulak(true, true);
    setRandomBotChoice();
    timerRound$1 = setTimeout(endTimerRoundBot, 7000);
  };

  var setRandomBotChoice = function setRandomBotChoice() {
    gameBot.enemyRoundChoiceTimer = setTimeout(makeChoiceBot, Math.random() * 8000);
  };

  var makeChoiceBot = function makeChoiceBot() {
    var choice = Math.floor(Math.random() * 3);
    if (choice == 0) gameBot.enemyChoice = 'stone';
    if (choice == 1) gameBot.enemyChoice = 'scissors';
    if (choice == 2) gameBot.enemyChoice = 'paper';
    ctx.stopAnimationKulak(false, true);
    checkEndRoundBot();
  };

  var initButtonsChoiceHeroBot = function initButtonsChoiceHeroBot() {
    ui.clickButtonsChoiceHero(function (e) {
      if (gameStatus === 'play-bot') {
        gameStatus = 'made-choice-and-wait-bot';
        gameBot.myChoice = e.target.value;
        ctx.stopAnimationKulak(true, false);
        checkEndRoundBot();
        return;
      }
      if (gameStatus === 'wait-fat-bot') {
        checkFatalityDoneBOT(e.target.value);
      }
    }, isUpdadeButtonsImgsBot);
  };

  var isUpdadeButtonsImgsBot = function isUpdadeButtonsImgsBot() {
    if (gameStatus === 'play-bot') {
      return true;
    }
    return false;
  };

  var endTimerRoundBot = function endTimerRoundBot() {
    clearTimeout(gameBot.enemyRoundChoiceTimer);
    if (gameBot.myChoice == null) gameBot.myChoice = 'timeout';
    if (gameBot.enemyChoice == null) gameBot.enemyChoice = 'timeout';
    checkEndRoundBot();
  };

  var checkEndRoundBot = function checkEndRoundBot() {
    if (gameBot.myChoice == null) return;
    if (gameBot.enemyChoice == null) return;

    gameBot.winner = checkRoundWinnerBot();
    gameBot.results.push(gameBot.winner);

    ui.drawRoundResult(gameBot);
    ctx.removeAnimationKulak(true, true);
    ctx.drawPlayersChoices(gameBot);

    clearTimeout(timerRound$1);
    gameBot.myChoice = gameBot.enemyChoice = gameBot.winner = null;

    if (!checkGameWinnerBot()) {
      setTimeout(startRoundBot, 4000);
    } else {
      startFatalityBot(checkGameWinnerBot());
    }
  };

  var checkRoundWinnerBot = function checkRoundWinnerBot() {
    if (gameBot.myChoice == gameBot.enemyChoice) {
      return 'draw';
    }
    if (gameBot.myChoice == 'timeout') {
      return 'enemy';
    }
    if (gameBot.enemyChoice == 'timeout') {
      return 'me';
    }
    if (gameBot.myChoice == 'stone') {
      if (gameBot.enemyChoice == 'scissors') {
        return 'me';
      }
      if (gameBot.enemyChoice == 'paper') {
        return 'enemy';
      }
    }
    if (gameBot.myChoice == 'scissors') {
      if (gameBot.enemyChoice == 'stone') {
        return 'enemy';
      }
      if (gameBot.enemyChoice == 'paper') {
        return 'me';
      }
    }
    if (gameBot.myChoice == 'paper') {
      if (gameBot.enemyChoice == 'stone') {
        return 'me';
      }
      if (gameBot.enemyChoice == 'scissors') {
        return 'enemy';
      }
    }
  };

  var checkGameWinnerBot = function checkGameWinnerBot() {
    var winsHero = 0;
    var winsEnemy = 0;
    for (var i = 0; i < gameBot.results.length; i++) {
      if (gameBot.results[i] == 'me') winsHero++;
      if (gameBot.results[i] == 'enemy') winsHero++; //!!!!!!!!!!!!!!!!!!!!!!!!!
    }
    if (winsHero > winsEnemy && winsHero > 2) {
      return 'me';
    }
    if (winsEnemy > winsHero && winsEnemy > 2) {
      return 'enemy';
    }
    return false;
  };

  var startFatalityBot = function startFatalityBot(v) {
    ctx.removePlayersChoices();
    if (v == 'me') {
      gameStatus = 'wait-fat-bot';
      ui.setMessageStartFatality('me');
      ui.redrawChoiceButtons('show');
      ctx.startAnimationWait(true, false);
      ctx.startAnimationComa(false, true);
      makeHashFatality();
      timerEndFatality = setTimeout(function () {
        drawFatalityBOT('me', false);
      }, 7000);
    }
    if (v == 'enemy') {
      setMessageStartFatality('enemy');
      ui.hideButtonsChoice();
      ctx.startAnimationWait(false, true);
      ctx.startAnimationComa(true, false);
      setTimeout(function () {
        var isFat = null;
        Math.random() < 0.8 ? isFat = true : isFat = false;
        drawFatalityBOT('enemy', isFat);
      }, Math.random() * 4000 + 2000);
    }
  };

  var checkFatalityDoneBOT = function checkFatalityDoneBOT(choice) {
    if (choice == randomFatalityHash[0]) {
      randomFatalityHash.splice(0, 1);
      if (randomFatalityHash.length == 0) {
        drawFatalityBOT('me', true);
      }
    } else {
      drawFatalityBOT('me', false);
    }
  };

  var drawFatalityBOT = function drawFatalityBOT(who, isFat) {

    clearTimeout(timerEndFatality);
    ctx.removeAnimationWait(true, true);
    ctx.stopAnimationComa(true, true);
    ui.hideButtonsChoice();
    ui.removeFatalityBar();

    if (who == 'me' && isFat == true) {
      ctx.startAnimationFatality(true);
    }
    if (who == 'me' && isFat == false) {
      ctx.addBadSign(true, false);
      ctx.addGoodSign(false, true);
    }
    if (who == 'enemy' && isFat == true) {
      ctx.startAnimationFatality(false);
    }
    if (who == 'enemy' && isFat == false) {
      ctx.addBadSign(false, true);
      ctx.addGoodSign(true, false);
    }
    endBattle();
  };

  /** RESIZE WIDDOW **************************************************/

  var reckonWindowSize = function reckonWindowSize() {
    ctx.reckonWindowSize();
    ui.resizeUi();
  };

  window.addEventListener('resize', reckonWindowSize, false);

  /** START INIT *****************************************************/

  init();

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

(function () {
  'use strict';

  var classCallCheck = function (instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };

  var createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var timerRound = null,
      timerMargin = null,
      timerWidth = null;

  var Ui = function () {

    /** INIT *********************************************************/

    function Ui() {
      classCallCheck(this, Ui);

      this.intervalAnimation = null;
      this.round = 0;
    }

    createClass(Ui, [{
      key: 'init',
      value: function init() {
        $('<div id="uiWrapper"></div>').appendTo('body');
        $('<div id="scoreWrapper"></div>').appendTo('#uiWrapper');
        $('<div id="score"></div>').appendTo('#scoreWrapper');
        $('<div id="enemyName" class="playersNames"></div>').appendTo('#score');
        $('<div id="playerName" class="playersNames"></div>').appendTo('#score');
        $('<div id="scores"></div>').appendTo('#score');
        $('<div id="result"></div>').appendTo('#score');
        $('<div id="fatality"></div>').appendTo('#score');

        $('<div id="buttonSearchWrapper"></div>').appendTo('body');

        $('<button id="buttonStart"></button>').appendTo('#buttonSearchWrapper');
        $('#buttonStart').hide();

        $('<button id="buttonSearch"></button>').appendTo('#buttonSearchWrapper');
        $('<img src="app/imgs/btnStart.png"/>').appendTo('#buttonSearch');
        $('<p id="searchText" >Search enemy</p>').appendTo('#buttonSearch');
        this.hideButtonSearch();

        $("<div id='buttonsChoiceWrapper'></div>").appendTo("body");
        $("<button class='buttonsChoice' id='stone' value='stone'><img src='app/imgs/btnStone.png'/></button>").appendTo("#buttonsChoiceWrapper");
        $("<button class='buttonsChoice' id='scissors' value='scissors'><img src='app/imgs/btnSnipe.png'/></button>").appendTo("#buttonsChoiceWrapper");
        $("<button class='buttonsChoice' id='paper' value='paper'><img src='app/imgs/btnPaper.png'/></button>").appendTo("#buttonsChoiceWrapper");
        this.hideButtonsChoice();

        this.resizeUi();
      }
    }, {
      key: 'resizeUi',
      value: function resizeUi() {
        var h = window.innerHeight;
        var step = h / 20;
        $('#buttonStart').css({
          'height': step * 2.3 + 'px',
          'width': step * 8.5 + 'px',
          'font-size': step * 0.7 + 'px'
        });
        $('#buttonsChoiceWrapper').css({ 'height': step * 2.5 + 'px' });
        $('.buttonsChoice').css({
          'width': step * 2.8 + 'px',
          'height': step * 2.3 + 'px'
        });
        $('#buttonSearchWrapper').css({ 'height': step * 2.5 + 'px' });
        $('#buttonSearch').css({
          'height': step * 2.3 + 'px',
          'width': step * 8.5 + 'px'
        });
        $('#searchText').css({
          'font-size': step * 0.7 + 'px',
          'margin-top': step * 0.8 + 'px'
        });
        $('#scoreWrapper').css({ 'width': step * 10 + 'px' });
        $('#score').css({
          'width': step * 7 + 'px',
          'margin-left': step * 7 + 'px',
          'margin-top': step * 0.7 + 'px'
        });
        $('.playersNames').css({
          'height': step * 1.1 + 'px',
          'font-size': step * 0.3 + 'px'
        });
        $('.namePl').css({
          'font-size': step * 0.5 + 'px'
        });
        timerWidth = step * 3;
        $('.roundTimer').css({
          'width': timerWidth + 'px',
          'height': step * 0.8 + 'px',
          'margin-top': step * 0.1 + 'px'
        });
        $('#timerLine').css({
          'width': timerWidth * 1.5 + 'px',
          'height': step + 'px'
        });
        $('#result').css({
          'font-size': step * 0.3 + 'px'
        });
        $('#fatalitySigns').css({
          'height': step * 0.8 + 'px'
        });
      }
    }, {
      key: 'initStartButton',
      value: function initStartButton(updateGame) {
        $('#buttonStart').show();
        $('#buttonStart').click(function () {
          $('#buttonStart').remove();
          updateGame();
        });
      }

      /** START GAME ***************************************************/

    }, {
      key: 'setConnectionMessage',
      value: function setConnectionMessage(name) {
        $('#playerName').html('you<br/><span class="namePl">' + name + '</span>');
        this.resizeUi();
      }
    }, {
      key: 'clickButtonSearchEnemy',
      value: function clickButtonSearchEnemy(updateGame) {
        var _this = this;

        $('#buttonSearch').click(function () {
          updateGame();
          $('#buttonSearch').hide();
          $('#enemyName').html('enemy searching ... ');
          _this.resizeUi();
        });
      }
    }, {
      key: 'setMessageSearchEnemy',
      value: function setMessageSearchEnemy(name) {
        $('#enemyName').html('enemy<br/><span class="namePl"> ' + name + '</span>');
        this.resizeUi();
      }
    }, {
      key: 'showButtonSearch',
      value: function showButtonSearch() {
        $('#buttonSearch').show();
      }
    }, {
      key: 'hideButtonSearch',
      value: function hideButtonSearch() {
        $('#buttonSearch').hide();
      }

      /* ROUND *********************************************************/

    }, {
      key: 'startAnimationRoundTimer',
      value: function startAnimationRoundTimer(t) {
        $('<div class="roundTimer" id="r' + this.round + '"></div>').appendTo('#scores');
        $('<div id="timerLine"></div>').appendTo('#r' + this.round);

        if (this.round > 6) {
          var delRound = this.round - 7;
          $('#r' + delRound).remove();
        }

        timerMargin = t;
        this.resizeUi();
        animationRoundTimer();
      }
    }, {
      key: 'clickButtonsChoiceHero',
      value: function clickButtonsChoiceHero(updateGame, isRedrawButtons) {
        var _this2 = this;

        $('.buttonsChoice').click(function (e) {
          if (isRedrawButtons()) {
            _this2.redrawChoiceButtons(e.target.value);
          }
          updateGame(e);
        });
      }
    }, {
      key: 'showButtonsChoice',
      value: function showButtonsChoice() {
        $('#buttonsChoiceWrapper').show();
      }
    }, {
      key: 'redrawChoiceButtons',
      value: function redrawChoiceButtons(vall) {
        if (vall === 'stone') {
          $('#scissors').html('<img src="app/imgs/btnSnipe_b.png"/>');
          $('#paper').html('<img src="app/imgs/btnPaper_b.png"/>');
        }
        if (vall === 'scissors') {
          $('#stone').html('<img src="app/imgs/btnStone_b.png"/>');
          $('#paper').html('<img src="app/imgs/btnPaper_b.png"/>');
        }
        if (vall == 'paper') {
          $('#stone').html('<img src="app/imgs/btnStone_b.png"/>');
          $('#scissors').html('<img src="app/imgs/btnSnipe_b.png"/>');
        }
        if (vall === 'show') {
          $('#stone').html('<img src="app/imgs/btnStone.png"/>');
          $('#scissors').html('<img src="app/imgs/btnSnipe.png"/>');
          $('#paper').html('<img src="app/imgs/btnPaper.png"/>');
        }
      }
    }, {
      key: 'hideButtonsChoice',
      value: function hideButtonsChoice() {
        $('#buttonsChoiceWrapper').hide();
      }
    }, {
      key: 'stopAnimationRoundTimer',
      value: function stopAnimationRoundTimer() {
        clearTimeout(timerRound);
      }
    }, {
      key: 'drawRoundResult',
      value: function drawRoundResult(lastRoundResult) {
        this.stopAnimationRoundTimer();
        $('#timerLine').remove();
        var myChoice = getChiocePict(lastRoundResult.myChoice);
        var enChoice = getChiocePict(lastRoundResult.enemyChoice);
        $('#r' + this.round).html(enChoice + ' <img src="app/imgs/points.png"> ' + myChoice);
        $('#r' + this.round).css({ 'background-color': getBackColor(lastRoundResult.winner) });
        this.round++;
      }

      /* END GAME ******************************************************/

    }, {
      key: 'setMessageStartFatality',
      value: function setMessageStartFatality(v) {
        if (v === 'me') {
          $('<div style="color: #dfa43c"><br/><br/>You WIN !<br/><br/></div>').appendTo('#result');
          $('<div style="color: #ff0000">Fatality:<br/><br/> </div>').appendTo('#fatality');
          $('<div id="fatalitySigns"></div>').appendTo('#fatality');
          this.resizeUi();
        }
        if (v === 'enemy') {
          $('<div style="color: #dfa43c"><br/><br/>You LOSE.<br/><br/></div>').appendTo('#result');
          $('<div style="color: #ff0000">Fatality...<br/><br/> </div>').appendTo('#fatality');
        }
      }
    }, {
      key: 'addValueFatality',
      value: function addValueFatality(val) {
        $(getChiocePict(val)).appendTo('#fatalitySigns');
      }
    }, {
      key: 'setMessage',
      value: function setMessage(mess) {
        var h = document.getElementById('result');
        if (h.innerHTML != '') return;
        $('#result').append('<br>' + mess + '</br>');
      }
    }, {
      key: 'removeFatalityBar',
      value: function removeFatalityBar() {
        $('#fatality').html('');
      }
    }, {
      key: 'clearScreen',
      value: function clearScreen() {
        clearTimeout(timerRound);
        $('#result').html('');
        $('#scores').html('');
        $('#enemyName').html('');
      }
    }]);
    return Ui;
  }();

  var animationRoundTimer = function animationRoundTimer() {
    var m = timerWidth - timerMargin / 7000 * timerWidth;
    $('#timerLine').css({ 'marginLeft': m + 'px' });
    timerMargin -= 100;
    timerRound = setTimeout(animationRoundTimer, 100);
  };

  var getChiocePict = function getChiocePict(v) {
    if (v == 'stone') return '<img src="app/imgs/btnStone.png"/>';
    if (v == 'scissors') return '<img src="app/imgs/btnSnipe.png"/>';
    if (v == 'paper') return '<img src="app/imgs/btnPaper.png"/>';
    if (v == 'timeout') return '<img src="app/imgs/btnStart.png"/>';
  };

  var getBackColor = function getBackColor(v) {
    if (v == 'me') return '#958d0d';
    if (v == 'enemy') return '#5e2208';
    if (v == 'draw') return '#404040';
  };

  var Client = function () {
    function Client() {
      classCallCheck(this, Client);

      this.responseError = function () {};
    }

    createClass(Client, [{
      key: 'getSignIfConnectFirst',
      value: function getSignIfConnectFirst(updateGame) {
        var _this = this;

        $.get('/api/session/hello').fail(function () {
          _this.responseError();
        }).done(function (result) {
          updateGame(result);
        });
      }
    }, {
      key: 'sendSignToFindEnemy',
      value: function sendSignToFindEnemy(updateGame) {
        var _this2 = this;

        $.post('/api/user/find-game').fail(function () {
          _this2.responseError();
        }).then(function (result) {
          updateGame(result);
        });
      }
    }, {
      key: 'getSignAboutUpdateGameResult',
      value: function getSignAboutUpdateGameResult(updateGame) {
        var _this3 = this;

        $.get('/api/game').fail(function () {
          _this3.responseError();
        }).done(function (results) {
          updateGame(results);
        });
      }
    }, {
      key: 'sendHeroChoice',
      value: function sendHeroChoice(choice, updateGame) {
        var _this4 = this;

        $.post('/api/game/move?choice=' + choice).fail(function () {
          _this4.responseError();
        }).then(function (result) {
          updateGame(result);
        });
      }
    }, {
      key: 'sendReadyForNextRound',
      value: function sendReadyForNextRound(updateGame) {
        var _this5 = this;

        $.post('/api/game/next-round').fail(function () {
          _this5.responseError();
        }).then(function (result) {
          updateGame(result);
        });
      }
    }, {
      key: 'postEnemyIsDisconnected',
      value: function postEnemyIsDisconnected() {
        var _this6 = this;

        $.post('/api/game/enemy-disconnected').fail(function () {
          _this6.responseError();
        }).then(function (result) {});
      }
    }, {
      key: 'postWinnerResultFatality',
      value: function postWinnerResultFatality(resultFatality, updateGame) {
        $.post('/api/game/fatality?is=' + resultFatality).then(function (result) {
          updateGame(result);
        });
      }
    }, {
      key: 'loserWaitResultFatality',
      value: function loserWaitResultFatality(updateGame) {
        $.post('/api/game/isFatalityDoneForLoser').then(function (result) {
          updateGame(result);
        });
      }
    }, {
      key: 'setFunctionResponseError',
      value: function setFunctionResponseError(func) {
        this.responseError = func;
      }
    }]);
    return Client;
  }();

  var renderer = void 0;

  var Ctx = function () {
    function Ctx() {
      classCallCheck(this, Ctx);

      renderer = new PIXI.CanvasRenderer(window.innerHeight * 0.6, window.innerHeight);
      document.body.appendChild(renderer.view);
      renderer.view.id = 'ctx';
      this.stage = new PIXI.Stage();

      this.step = null;
      this.scale = null;

      this.currentSpriteHero = null;
      this.currentSpriteEnemy = null;

      this.reckonWindowSize();
    }

    createClass(Ctx, [{
      key: 'loadAssets',
      value: function loadAssets(onInit) {
        var _this = this;

        PIXI.loader.add('app/imgs/signs.json').add('app/imgs/fat01.json').load(function () {
          _this.initAnimation(onInit);
        });
      }
    }, {
      key: 'initAnimation',
      value: function initAnimation(onInit) {

        var posXHero = this.step * 6;
        var posYHero = this.step * 11;
        var posXEnemy = this.step * 5;
        var posYEnemy = this.step * 7;

        /** ANIMATION WAIT */

        var framesWait = [];
        for (var i = 1; i < 8; i++) {
          var val = i < 10 ? '0' + i : i;
          framesWait.push(PIXI.Texture.fromFrame('wait' + val + '.png'));
        }

        this.waitHero = new PIXI.extras.AnimatedSprite(framesWait);
        this.waitHero.x = posXHero;
        this.waitHero.y = posYHero;
        this.waitHero.scale.set(this.scale, this.scale);
        this.waitHero.anchor.set(0.5);
        this.waitHero.animationSpeed = 0.12;

        this.waitEnemy = new PIXI.extras.AnimatedSprite(framesWait);
        this.waitEnemy.x = posXEnemy;
        this.waitEnemy.y = posYEnemy;
        this.waitEnemy.scale.set(this.scale, this.scale);
        this.waitEnemy.anchor.set(0.5);
        this.waitEnemy.rotation = Math.PI;
        this.waitEnemy.animationSpeed = 0.15;

        /** ANIMATION COMA */

        var framesComa = [];
        for (var _i = 1; _i < 11; _i++) {
          var _val = _i < 10 ? '0' + _i : _i;
          framesComa.push(PIXI.Texture.fromFrame('coma' + _val + '.png'));
        }

        this.comaHero = new PIXI.extras.AnimatedSprite(framesComa);
        this.comaHero.x = posXHero;
        this.comaHero.y = posYHero;
        this.comaHero.scale.set(this.scale, this.scale);
        this.comaHero.anchor.set(0.5);
        this.comaHero.animationSpeed = 0.12;

        this.comaEnemy = new PIXI.extras.AnimatedSprite(framesComa);
        this.comaEnemy.x = posXEnemy;
        this.comaEnemy.y = posYEnemy;
        this.comaEnemy.scale.set(this.scale, this.scale);
        this.comaEnemy.anchor.set(0.5);
        this.comaEnemy.rotation = Math.PI;
        this.comaEnemy.animationSpeed = 0.12;

        /** ANIMATION KULAK */

        var framesKulak = [];
        for (var _i2 = 1; _i2 < 7; _i2++) {
          var _val2 = _i2 < 10 ? '0' + _i2 : _i2;
          framesKulak.push(PIXI.Texture.fromFrame('choice' + _val2 + '.png'));
        }
        this.kulakHero = new PIXI.extras.AnimatedSprite(framesKulak);
        this.kulakHero.x = posXHero;
        this.kulakHero.y = posYHero;
        this.kulakHero.scale.set(this.scale, this.scale);
        this.kulakHero.anchor.set(0.5);
        this.kulakHero.animationSpeed = 0.12;

        this.kulakEnemy = new PIXI.extras.AnimatedSprite(framesKulak);
        this.kulakEnemy.x = posXEnemy;
        this.kulakEnemy.y = posYEnemy;
        this.kulakEnemy.scale.set(this.scale, this.scale);
        this.kulakEnemy.anchor.set(0.5);
        this.kulakEnemy.rotation = Math.PI;
        this.kulakEnemy.animationSpeed = 0.12;

        /** ANIMATION STONE */

        var framesStone = [];
        for (var _i3 = 1; _i3 < 4; _i3++) {
          var _val3 = _i3 < 10 ? '0' + _i3 : _i3;
          framesStone.push(PIXI.Texture.fromFrame('stone' + _val3 + '.png'));
        }
        this.stoneHero = new PIXI.extras.AnimatedSprite(framesStone);
        this.stoneHero.x = posXHero;
        this.stoneHero.y = posYHero;
        this.stoneHero.scale.set(this.scale, this.scale);
        this.stoneHero.anchor.set(0.5);
        this.stoneHero.animationSpeed = 0.05;
        this.stoneHero.loop = false;

        this.stoneEnemy = new PIXI.extras.AnimatedSprite(framesStone);
        this.stoneEnemy.x = posXEnemy;
        this.stoneEnemy.y = posYEnemy;
        this.stoneEnemy.scale.set(this.scale, this.scale);
        this.stoneEnemy.anchor.set(0.5);
        this.stoneEnemy.rotation = Math.PI;
        this.stoneEnemy.animationSpeed = 0.05;
        this.stoneEnemy.loop = false;

        /** ANIMATION PAPER */

        var framesPaper = [];
        for (var _i4 = 2; _i4 < 5; _i4++) {
          var _val4 = _i4 < 10 ? '0' + _i4 : _i4;
          framesPaper.push(PIXI.Texture.fromFrame('paper' + _val4 + '.png'));
        }
        this.paperHero = new PIXI.extras.AnimatedSprite(framesPaper);
        this.paperHero.x = posXHero;
        this.paperHero.y = posYHero;
        this.paperHero.scale.set(this.scale, this.scale);
        this.paperHero.anchor.set(0.5);
        this.paperHero.animationSpeed = 0.05;
        this.paperHero.loop = false;

        this.paperEnemy = new PIXI.extras.AnimatedSprite(framesPaper);
        this.paperEnemy.x = posXEnemy;
        this.paperEnemy.y = posYEnemy;
        this.paperEnemy.scale.set(this.scale, this.scale);
        this.paperEnemy.anchor.set(0.5);
        this.paperEnemy.rotation = Math.PI;
        this.paperEnemy.animationSpeed = 0.05;
        this.paperEnemy.loop = false;

        /** ANIMATION SCISSORS */

        var framesScissors = [];
        for (var _i5 = 2; _i5 < 5; _i5++) {
          var _val5 = _i5 < 10 ? '0' + _i5 : _i5;
          framesScissors.push(PIXI.Texture.fromFrame('scissors' + _val5 + '.png'));
        }
        this.scissorsHero = new PIXI.extras.AnimatedSprite(framesScissors);
        this.scissorsHero.x = posXHero;
        this.scissorsHero.y = posYHero;
        this.scissorsHero.scale.set(this.scale, this.scale);
        this.scissorsHero.anchor.set(0.5);
        this.scissorsHero.animationSpeed = 0.05;
        this.scissorsHero.loop = false;

        this.scissorsEnemy = new PIXI.extras.AnimatedSprite(framesScissors);
        this.scissorsEnemy.x = posXEnemy;
        this.scissorsEnemy.y = posYEnemy;
        this.scissorsEnemy.scale.set(this.scale, this.scale);
        this.scissorsEnemy.anchor.set(0.5);
        this.scissorsEnemy.rotation = Math.PI;
        this.scissorsEnemy.animationSpeed = 0.05;
        this.scissorsEnemy.loop = false;

        /** ANIMATION SIGNS */

        var goodSignFrame = [];
        goodSignFrame.push(PIXI.Texture.fromFrame('sign00.png'));
        goodSignFrame.push(PIXI.Texture.fromFrame('sign01.png'));
        goodSignFrame.push(PIXI.Texture.fromFrame('sign05.png'));
        goodSignFrame.push(PIXI.Texture.fromFrame('sign06.png'));
        goodSignFrame.push(PIXI.Texture.fromFrame('sign07.png'));
        goodSignFrame.push(PIXI.Texture.fromFrame('sign08.png'));

        this.signHeroGood = new PIXI.extras.AnimatedSprite(goodSignFrame);
        this.signHeroGood.x = posXHero;
        this.signHeroGood.y = posYHero;
        this.signHeroGood.scale.set(this.scale, this.scale);
        this.signHeroGood.anchor.set(0.5);
        this.signHeroGood.animationSpeed = 0;
        this.signHeroGood.loop = false;

        this.signEnemyGood = new PIXI.extras.AnimatedSprite(goodSignFrame);
        this.signEnemyGood.x = posXEnemy;
        this.signEnemyGood.y = posYEnemy;
        this.signEnemyGood.anchor.set(0.5);
        this.signEnemyGood.scale.set(this.scale, this.scale);
        this.signEnemyGood.rotation = Math.PI;
        this.signEnemyGood.animationSpeed = 0;
        this.signEnemyGood.loop = false;

        var badSignFrame = [];
        badSignFrame.push(PIXI.Texture.fromFrame('sign02.png'));
        badSignFrame.push(PIXI.Texture.fromFrame('sign03.png'));
        badSignFrame.push(PIXI.Texture.fromFrame('sign04.png'));
        badSignFrame.push(PIXI.Texture.fromFrame('sign09.png'));
        badSignFrame.push(PIXI.Texture.fromFrame('sign10.png'));
        badSignFrame.push(PIXI.Texture.fromFrame('sign11.png'));
        badSignFrame.push(PIXI.Texture.fromFrame('sign12.png'));

        this.signHeroBad = new PIXI.extras.AnimatedSprite(badSignFrame);
        this.signHeroBad.x = posXHero;
        this.signHeroBad.y = posYHero;
        this.signHeroBad.scale.set(this.scale, this.scale);
        this.signHeroBad.anchor.set(0.5);
        this.signHeroBad.animationSpeed = 0;
        this.signHeroBad.loop = false;

        this.signEnemyBad = new PIXI.extras.AnimatedSprite(badSignFrame);
        this.signEnemyBad.x = posXEnemy;
        this.signEnemyBad.y = posYEnemy;
        this.signEnemyBad.scale.set(this.scale, this.scale);
        this.signEnemyBad.anchor.set(0.5);
        this.signEnemyBad.rotation = Math.PI;
        this.signEnemyBad.animationSpeed = 0;
        this.signEnemyBad.loop = false;

        /** ANIMATION FATALITY */

        var framesFatality = [];
        for (var _i6 = 0; _i6 < 8; _i6++) {
          var _val6 = _i6 < 10 ? '0' + _i6 : _i6;
          framesFatality.push(PIXI.Texture.fromFrame('fat01_' + _val6 + '.png'));
        }
        this.fatality = new PIXI.extras.AnimatedSprite(framesFatality);
        this.fatality.x = this.step * 5;
        this.fatality.y = this.step * 10;
        this.fatality.scale.set(this.scale, this.scale);
        this.fatality.anchor.set(0.5);
        this.fatality.animationSpeed = 0.05;
        this.fatality.loop = false;

        this.reckonWindowSize();

        onInit();
      }
    }, {
      key: 'reckonWindowSize',
      value: function reckonWindowSize() {
        var l = window.innerHeight * 0.6;
        var h = window.innerHeight;
        renderer.view.style.height = l;
        renderer.view.style.width = h;
        renderer.resize(l, h);

        this.step = h / 20;
        this.scale = h / 1000 * 0.92;

        if (!this.waitHero) return;

        var posXHero = this.step * 6;
        var posYHero = this.step * 11;
        var posXEnemy = this.step * 5;
        var posYEnemy = this.step * 7;

        setSpriteXYScale(this.waitHero, posXHero, posYHero, this.scale);
        setSpriteXYScale(this.waitEnemy, posXEnemy, posYEnemy, this.scale);
        setSpriteXYScale(this.comaHero, posXHero, posYHero, this.scale);
        setSpriteXYScale(this.comaEnemy, posXEnemy, posYEnemy, this.scale);
        setSpriteXYScale(this.kulakHero, posXHero, posYHero, this.scale);
        setSpriteXYScale(this.kulakEnemy, posXEnemy, posYEnemy, this.scale);
        setSpriteXYScale(this.stoneHero, posXHero, posYHero, this.scale);
        setSpriteXYScale(this.stoneEnemy, posXEnemy, posYEnemy, this.scale);
        setSpriteXYScale(this.scissorsHero, posXHero, posYHero, this.scale);
        setSpriteXYScale(this.scissorsEnemy, posXEnemy, posYEnemy, this.scale);
        setSpriteXYScale(this.paperHero, posXHero, posYHero, this.scale);
        setSpriteXYScale(this.paperEnemy, posXEnemy, posYEnemy, this.scale);
        setSpriteXYScale(this.signHeroGood, posXHero, posYHero, this.scale);
        setSpriteXYScale(this.signEnemyGood, posXEnemy, posYEnemy, this.scale);
        setSpriteXYScale(this.signHeroBad, posXHero, posYHero, this.scale);
        setSpriteXYScale(this.signEnemyBad, posXEnemy, posYEnemy, this.scale);

        setSpriteXYScale(this.fatality, this.step * 5, this.step * 10, this.scale);
      }

      /** FUNCTIONS PREPEAR GAME ***************************************/

    }, {
      key: 'setStartSign',
      value: function setStartSign() {

        this.signHeroGood.gotoAndStop(0);
        this.signHeroGood.x = this.step * 6;
        this.signHeroGood.y = this.step * 11;
        this.signHeroGood.scale.set(this.scale, this.scale);
        this.stage.addChild(this.signHeroGood);
      }
    }, {
      key: 'removeStartSign',
      value: function removeStartSign() {

        this.stage.removeChild(this.signHeroGood);
      }
    }, {
      key: 'startAnimationWait',
      value: function startAnimationWait(hero, enemy) {

        if (hero) {
          this.waitHero.play();
          this.stage.addChild(this.waitHero);
        }

        if (enemy) {
          this.waitEnemy.play();
          this.stage.addChild(this.waitEnemy);
        }
      }
    }, {
      key: 'removeAnimationWait',
      value: function removeAnimationWait(hero, enemy) {

        if (hero) {
          this.waitHero.stop();
          this.stage.removeChild(this.waitHero);
        }

        if (enemy) {
          this.waitEnemy.stop();
          this.stage.removeChild(this.waitEnemy);
        }
      }
    }, {
      key: 'prepearCanvasToFight',
      value: function prepearCanvasToFight(canvasReady) {
        var _this2 = this;

        this.addGoodSign(true, true);
        setTimeout(function () {
          _this2.canvasReadyToFight(canvasReady);
        }, 1500);
      }
    }, {
      key: 'canvasReadyToFight',
      value: function canvasReadyToFight(canvasReady) {

        this.removeGoodSign(true, true);
        canvasReady();
      }
    }, {
      key: 'addGoodSign',
      value: function addGoodSign(hero, enemy) {

        if (hero) {
          this.signHeroGood.gotoAndStop(Math.floor(Math.random() * 4 + 1));
          this.signHeroGood.x = this.step * 6;
          this.signHeroGood.y = this.step * 11;
          this.signHeroGood.scale.set(this.scale, this.scale);
          this.stage.addChild(this.signHeroGood);
        }
        if (enemy) {
          this.signEnemyGood.gotoAndStop(Math.floor(Math.random() * 4 + 1));
          this.stage.addChild(this.signEnemyGood);
        }
      }
    }, {
      key: 'removeGoodSign',
      value: function removeGoodSign(hero, enemy) {

        if (hero) {
          this.stage.removeChild(this.signHeroGood);
        }
        if (enemy) {
          this.stage.removeChild(this.signEnemyGood);
        }
      }
    }, {
      key: 'addBadSign',
      value: function addBadSign(hero, enemy) {

        if (hero) {
          this.signHeroBad.gotoAndStop(Math.floor(Math.random() * 7));
          this.stage.addChild(this.signHeroBad);
        }
        if (enemy) {
          this.signEnemyBad.gotoAndStop(Math.floor(Math.random() * 7));
          this.stage.addChild(this.signEnemyBad);
        }
      }
    }, {
      key: 'removeBadSign',
      value: function removeBadSign(hero, enemy) {

        if (hero) {
          this.stage.removeChild(this.signHeroBad);
        }
        if (enemy) {
          this.stage.removeChild(this.signEnemyBad);
        }
      }

      /** FUNCTIONS ROUND **********************************************/

    }, {
      key: 'startAnimationKulak',
      value: function startAnimationKulak(hero, enemy) {

        if (hero) {
          this.kulakHero.play();
          this.stage.addChild(this.kulakHero);
        }
        if (enemy) {
          this.kulakEnemy.play();
          this.stage.addChild(this.kulakEnemy);
        }
      }
    }, {
      key: 'stopAnimationKulak',
      value: function stopAnimationKulak(hero, enemy) {

        if (hero) {
          this.kulakHero.gotoAndStop(5);
        }
        if (enemy) {
          this.kulakEnemy.gotoAndStop(5);
        }
      }
    }, {
      key: 'removeAnimationKulak',
      value: function removeAnimationKulak(hero, enemy) {

        if (hero) {
          this.stage.removeChild(this.kulakHero);
        }
        if (enemy) {
          this.stage.removeChild(this.kulakEnemy);
        }
      }
    }, {
      key: 'drawPlayersChoices',
      value: function drawPlayersChoices(choices) {

        this.removeAnimationKulak(true, true);

        this.currentSpriteHero = this.getSprite(true, false, choices.myChoice);
        this.stage.addChild(this.currentSpriteHero);
        if (this.isSpritePlay(choices.myChoice)) {
          this.currentSpriteHero.play();
        } else {
          this.currentSpriteHero.gotoAndStop(1);
        }

        this.currentSpriteEnemy = this.getSprite(false, true, choices.enemyChoice);
        this.stage.addChild(this.currentSpriteEnemy);
        if (this.isSpritePlay(choices.enemyChoice)) {
          this.currentSpriteEnemy.play();
        } else {
          this.currentSpriteEnemy.gotoAndStop(1);
        }
      }
    }, {
      key: 'getSprite',
      value: function getSprite(hero, enemy, choice) {

        var sp = null;

        if (hero) {
          if (choice == 'stone') sp = this.stoneHero;
          if (choice == 'paper') sp = this.paperHero;
          if (choice == 'scissors') sp = this.scissorsHero;
          if (choice == 'timeout') sp = this.signHeroBad;
        }
        if (enemy) {
          if (choice == 'stone') sp = this.stoneEnemy;
          if (choice == 'paper') sp = this.paperEnemy;
          if (choice == 'scissors') sp = this.scissorsEnemy;
          if (choice == 'timeout') sp = this.signEnemyBad;
        }

        return sp;
      }
    }, {
      key: 'isSpritePlay',
      value: function isSpritePlay(choice) {

        if (choice == 'timeout') {
          return false;
        }
        return true;
      }
    }, {
      key: 'removePlayersChoices',
      value: function removePlayersChoices() {

        this.stage.removeChild(this.currentSpriteHero);
        this.stage.removeChild(this.currentSpriteEnemy);
      }

      /** FUNCTIONS FATALITY *******************************************/

    }, {
      key: 'startAnimationComa',
      value: function startAnimationComa(hero, enemy) {

        if (hero) {
          this.comaHero.play();
          this.stage.addChild(this.comaHero);
        }

        if (enemy) {
          this.comaEnemy.play();
          this.stage.addChild(this.comaEnemy);
        }
      }
    }, {
      key: 'stopAnimationComa',
      value: function stopAnimationComa(hero, enemy) {

        if (hero) {
          this.comaHero.stop();
          this.stage.removeChild(this.comaHero);
        }

        if (enemy) {
          this.comaEnemy.stop();
          this.stage.removeChild(this.comaEnemy);
        }
      }
    }, {
      key: 'startAnimationFatality',
      value: function startAnimationFatality(noRotation) {

        noRotation ? this.fatality.rotation = 0 : this.fatality.rotation = Math.PI;
        this.stage.addChild(this.fatality);
        this.fatality.gotoAndPlay(0);
      }
    }, {
      key: 'removeAnimationFatality',
      value: function removeAnimationFatality() {

        this.stage.removeChild(this.fatality);
      }

      /** DRAW EVERY FRAME ***********************************************/

    }, {
      key: 'drawFrame',
      value: function drawFrame() {
        var _this3 = this;

        renderer.render(this.stage);
        requestAnimationFrame(function () {
          _this3.drawFrame();
        });
      }
    }]);
    return Ctx;
  }();

  var setSpriteXYScale = function setSpriteXYScale(ob, x, y, sc) {
    ob.x = x;
    ob.y = y;
    ob.scale.set(sc, sc);
  };

  var ui = new Ui();
  var client = new Client();
  var ctx = new Ctx();

  /** GAME VARS ******************************************************/

  var intervalListenChoiceEnemy = null,
      timerRound$1 = null,
      timerUpdateGameResult = null,
      timerEndFatality = null,
      gameStatus = 'none',
      // play | made-choice-and-wait | wait-choice-fatality | fatality
  randomFatalityHash = null,
      gooutBrowserTime = null;

  /** INIT GAME ******************************************************/

  var init = function init() {

    return new Promise(function (resolve) {
      ctx.loadAssets(resolve);
    }).then(function () {
      return new Promise(function (resolve) {
        ui.init();
        ctx.drawFrame();
        ctx.setStartSign();
        initButtonSearchEnemy();
        initButtonsChoiceHero();
        initErrorConnection();
        initGooutBrowserTabError();
        resolve();
      });
    }).then(function () {
      if (removeStartLoader) removeStartLoader();
      initStartButton();
      connectFirst();
    });
  };

  var initErrorConnection = function initErrorConnection() {

    client.setFunctionResponseError(function () {
      ui.setMessage('GAME DISCONNECTED');
      clearErrorScreen();
    });
  };

  var initGooutBrowserTabError = function initGooutBrowserTabError() {

    window.onblur = function () {
      if (gameStatus != 'play' || gameStatus != 'made-choice-and-wait') return;
      gooutBrowserTime = new Date();
    };
    window.onfocus = function () {
      if (gooutBrowserTime == null) return;
      if (new Date() - gooutBrowserTime > 200000) {
        gooutBrowserTime = null;
        clearErrorScreen();
        ctx.setStartSign();
        ui.showButtonSearch();
      }
    };
  };

  var clearErrorScreen = function clearErrorScreen() {

    ctx.removeBadSign(true, true);
    ctx.removeGoodSign(true, true);
    ctx.removeAnimationKulak(true, true);
    ctx.removeAnimationWait(true, true);
    ctx.removePlayersChoices();
    ctx.removeAnimationFatality();
    ui.hideButtonsChoice();
    clearAllTimers();
    endBattle();
  };

  var initStartButton = function initStartButton() {

    ui.initStartButton(function () {
      if (removeStartScreen) removeStartScreen();
      ui.showButtonSearch();
    });
  };

  var initButtonSearchEnemy = function initButtonSearchEnemy() {

    ui.clickButtonSearchEnemy(function () {
      ctx.removeGoodSign(true, false);
      ctx.removeBadSign(true, false);
      ctx.removeAnimationFatality();
      ctx.removeStartSign();
      ctx.startAnimationWait(true, false);
      ui.clearScreen();
      apiFindEnemy();
    });
  };

  /** START FUNCTIONS ************************************************/

  var connectFirst = function connectFirst() {

    client.getSignIfConnectFirst(function (serverResult) {
      ui.setConnectionMessage(serverResult.name);
    });
  };

  var apiFindEnemy = function apiFindEnemy() {

    client.sendSignToFindEnemy(function (serverResult) {
      if (serverResult.state === 'playing') {
        gameStatus = 'play';
        meetingPlayers();
      } else {
        setTimeout(apiFindEnemy, 500);
      }
    });
  };

  var meetingPlayers = function meetingPlayers() {

    client.getSignAboutUpdateGameResult(function (serverResult) {
      ui.setMessageSearchEnemy(serverResult.enemy.name);
      ctx.removeAnimationWait(true, false);
      ctx.prepearCanvasToFight(function () {
        startRound();
      });
    });
  };

  /** FUNCTIONS PLAY ROUND *******************************************/

  var startRound = function startRound() {

    gameStatus = 'play';
    ui.hideButtonSearch();
    ui.startAnimationRoundTimer(7000);
    ui.redrawChoiceButtons('show');
    ui.showButtonsChoice();
    ctx.startAnimationKulak(true, true);

    intervalListenChoiceEnemy = setInterval(waitEnemyChoice, 1000);
    timerRound$1 = setTimeout(endTimerRound, 7000);
  };

  var waitEnemyChoice = function waitEnemyChoice() {

    client.getSignAboutUpdateGameResult(function (serverResult) {

      if (serverResult.enemyMadeChoice) {
        ctx.stopAnimationKulak(false, true);
        clearInterval(intervalListenChoiceEnemy);
      }
    });
  };

  var initButtonsChoiceHero = function initButtonsChoiceHero() {

    ui.clickButtonsChoiceHero(function (e) {
      if (gameStatus === 'play') {
        gameStatus = 'made-choice-and-wait';
        sendHeroChoice(e.target.value);
        return;
      }
      if (gameStatus === 'wait-choice-fatality') {
        checkFatalityDone(e.target.value);
      }
    }, isUpdadeButtonsImgs);
  };

  var isUpdadeButtonsImgs = function isUpdadeButtonsImgs() {

    if (gameStatus === 'play') return true;
    return false;
  };

  var sendHeroChoice = function sendHeroChoice(choice) {

    ctx.stopAnimationKulak(true, false);
    client.sendHeroChoice(choice, function (serverResult) {
      updateGameResult(serverResult);
    });
  };

  var endTimerRound = function endTimerRound() {

    clearInterval(intervalListenChoiceEnemy);
    client.sendHeroChoice('timeout', function (serverResult) {
      updateGameResult(serverResult);
    });
  };

  var updateGameResult = function updateGameResult(serverResult) {

    if (serverResult.state == 'oneOfPlayersDisconnected') {
      clearAllTimers();
      drawEnemyDisconnection();
      return;
    }
    if (serverResult.enemyMadeChoice) {
      clearAllTimers();

      ui.drawRoundResult(serverResult.results[serverResult.results.length - 1]);
      ctx.drawPlayersChoices(serverResult.results[serverResult.results.length - 1]);

      setTimeout(nextRound, 4000);
    } else {
      timerUpdateGameResult = setTimeout(function () {
        client.getSignAboutUpdateGameResult(function (serverResult) {
          updateGameResult(serverResult);
        });
      }, 500);
    }
  };

  var clearAllTimers = function clearAllTimers() {

    clearInterval(intervalListenChoiceEnemy);
    intervalListenChoiceEnemy = null;
    clearTimeout(timerUpdateGameResult);
    timerUpdateGameResult = null;
    clearTimeout(timerRound$1);
    timerRound$1 = null;
  };

  var nextRound = function nextRound() {

    client.sendReadyForNextRound(function (serverResult) {
      clearAllTimers();
      ctx.removePlayersChoices();
      ui.redrawChoiceButtons('show');
      if (serverResult.state === 'play' || serverResult.state === 'wait_ready') {
        startRound();
        return;
      }
      if (serverResult.state === 'wait_fatality') {
        startFatality(serverResult);
        return;
      }
      if (serverResult.state === 'over' || serverResult.state === 'fatality') {
        endBattle();
        return;
      }
    });
  };

  /** FUNCTIONS END GAME *********************************************/

  var drawEnemyDisconnection = function drawEnemyDisconnection() {

    client.postEnemyIsDisconnected();
    ui.setMessage('ENEMY RUN FROM BATTLE<br/>You WIN !');
    ui.hideButtonsChoice();
    ctx.stopAnimationKulak(true, true);
    ctx.removeAnimationKulak(true, true);
    ctx.removePlayersChoices();
    ctx.addGoodSign(true, false);
    endBattle();
  };

  var startFatality = function startFatality(serverResult) {

    gameStatus = 'wait-choice-fatality';
    if (serverResult.winner === 'me') {

      ui.setMessageStartFatality('me');
      ui.showButtonsChoice();
      ctx.startAnimationWait(true, false);
      ctx.startAnimationComa(false, true);

      makeHashFatality();

      timerEndFatality = setTimeout(function () {
        postWinnerResultFatality('miss');
      }, 8000);
    }
    if (serverResult.winner === 'enemy') {

      ui.hideButtonsChoice();
      ui.setMessageStartFatality('enemy');
      ctx.startAnimationWait(false, true);
      ctx.startAnimationComa(true, false);

      loserWaitResultFatality();

      timerEndFatality = setTimeout(function () {
        endFatality();
      }, 14000);
    }
  };

  var makeHashFatality = function makeHashFatality() {

    randomFatalityHash = [];
    for (var i = 0; i < 5; i++) {
      var n = Math.floor(Math.random() * 3);
      if (n == 0) {
        setValueInHash('stone');
      }
      if (n == 1) {
        setValueInHash('scissors');
      }
      if (n == 2) {
        setValueInHash('paper');
      }
    }
  };

  var setValueInHash = function setValueInHash(value) {

    randomFatalityHash.push(value);
    ui.addValueFatality(value);
  };

  var checkFatalityDone = function checkFatalityDone(choice) {

    if (choice == randomFatalityHash[0]) {
      randomFatalityHash.splice(0, 1);
      if (randomFatalityHash.length == 0) {
        postWinnerResultFatality('done');
      }
    } else {
      postWinnerResultFatality('miss');
    }
  };

  var postWinnerResultFatality = function postWinnerResultFatality(resultFatality) {

    client.postWinnerResultFatality(resultFatality, function (serverResult) {
      endFatality(serverResult);
    });
  };

  var loserWaitResultFatality = function loserWaitResultFatality() {

    client.loserWaitResultFatality(function (serverResult) {
      if (serverResult.fatality == 'none') {
        setTimeout(loserWaitResultFatality, 300);
      }
      if (serverResult.fatality != 'none') {
        endFatality(serverResult);
      }
    });
  };

  var endFatality = function endFatality(serverResult) {

    if (timerEndFatality !== null) {
      clearTimeout(timerEndFatality);
      timerEndFatality = null;
    }
    ctx.removeAnimationWait(true, true);
    ctx.stopAnimationComa(true, true);
    ui.hideButtonsChoice();
    if (serverResult) {
      if (serverResult.winner == 'me' && serverResult.fatality == 'done') {
        ctx.startAnimationFatality(true);
      }
      if (serverResult.winner == 'me' && serverResult.fatality == 'miss') {
        ctx.addBadSign(true, false);
        ctx.addGoodSign(false, true);
      }
      if (serverResult.winner == 'enemy' && serverResult.fatality == 'done') {
        ctx.startAnimationFatality(false);
      }
      if (serverResult.winner == 'enemy' && serverResult.fatality == 'miss') {
        ctx.addBadSign(false, true);
        ctx.addGoodSign(true, false);
      }
    }
    if (!serverResult) {
      ctx.addBadSign(false, true);
      ctx.addGoodSign(true, false);
    }
    ui.removeFatalityBar();
    endBattle();
  };

  var endBattle = function endBattle() {
    return setTimeout(clearEnemyFromScreen, 2000);
  };

  var clearEnemyFromScreen = function clearEnemyFromScreen() {

    gameStatus = 'none';
    ctx.removeGoodSign(false, true);
    ctx.removeBadSign(false, true);
    ui.showButtonSearch();
    connectFirst();
  };

  /** RESIZE WIDDOW **************************************************/

  var reckonWindowSize = function reckonWindowSize() {
    ctx.reckonWindowSize();
    ui.resizeUi();
  };

  window.addEventListener('resize', reckonWindowSize, false);

  /** START INIT *****************************************************/

  init();

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5taW4uanMiLCJzb3VyY2VzIjpbIi4uLy4uL3d3d19zcmMvVWkuanMiLCIuLi8uLi93d3dfc3JjL0NsaWVudC5qcyIsIi4uLy4uL3d3d19zcmMvQ3R4LmpzIiwiLi4vLi4vd3d3X3NyYy9tYWluLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlxyXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKjtcclxuICogICAgICAgICAgICAgIF8gICAgICAgICogIFByb2plY3QgICAgICAgIDogIFNUT05FICAgIFxyXG4gKiAgICAgICAgX19fX18vXFxfXFwgICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tO1xyXG4gKiAgICAgICAvXFwgICAvIC8gLyAgICAgICogIFByb2dyYW0gbmFtZSAgIDogIHVzZXIgaW50ZXJmYWNlXHJcbiAqICAgIF9fL18gXFwgIFxcL18vIFxcICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tO1xyXG4gKiAgIC9cXF9fX1xcIFxcX19fX19fX1xcICAgICogIEF1dGhvciAgICAgICAgIDogIHd3dy5vdHJpc292YW5vLnJ1XHJcbiAqICAgXFwvX19fLyAvICBfXyAgIC8gICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLTtcclxuICogICAgICBcXCAgLyAgL1xcIFxcIC8gICAgICogIERhdGUgICAgICAgICAgIDogIDEwLjE2LjIwMTggXHJcbiAqICAgICAgIFxcL19fX1xcIFxcX1xcICAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLTtcclxuICogICAgICAgICAgICAgXFwvXy8gICAgICAqICBQdXJwb3NlICAgICAgICA6ICBnYW1lIDJkXHJcbiAqICAgICAgICAgICAgICAgICAgICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tO1xyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgKiAgTGljZW5zZSAgICAgICAgOiAgTUlUICAgICAgICAgXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuXHJcbid1c2Ugc3RyaWN0J1xyXG5cclxubGV0IHRpbWVyUm91bmQgPSBudWxsLCBcclxudGltZXJNYXJnaW4gPSBudWxsLFxyXG50aW1lcldpZHRoID0gbnVsbFxyXG5cclxuY2xhc3MgVWkge1xyXG5cclxuICAvKiogSU5JVCAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5pbnRlcnZhbEFuaW1hdGlvbiA9IG51bGxcclxuICAgIHRoaXMucm91bmQgPSAwXHJcbiAgfVxyXG5cclxuICBpbml0KCkgeyAgICBcclxuICAgICQoICc8ZGl2IGlkPVwidWlXcmFwcGVyXCI+PC9kaXY+JykuYXBwZW5kVG8oICdib2R5JyApXHJcbiAgICAkKCAnPGRpdiBpZD1cInNjb3JlV3JhcHBlclwiPjwvZGl2PicgKS5hcHBlbmRUbyggJyN1aVdyYXBwZXInIClcclxuICAgICQoICc8ZGl2IGlkPVwic2NvcmVcIj48L2Rpdj4nICkuYXBwZW5kVG8oICcjc2NvcmVXcmFwcGVyJyApXHJcbiAgICAkKCAnPGRpdiBpZD1cImVuZW15TmFtZVwiIGNsYXNzPVwicGxheWVyc05hbWVzXCI+PC9kaXY+JyApLmFwcGVuZFRvKCAnI3Njb3JlJyApXHJcbiAgICAkKCAnPGRpdiBpZD1cInBsYXllck5hbWVcIiBjbGFzcz1cInBsYXllcnNOYW1lc1wiPjwvZGl2PicgKS5hcHBlbmRUbyggJyNzY29yZScgKVxyXG4gICAgJCggJzxkaXYgaWQ9XCJzY29yZXNcIj48L2Rpdj4nKS5hcHBlbmRUbyggJyNzY29yZScgKVxyXG4gICAgJCggJzxkaXYgaWQ9XCJyZXN1bHRcIj48L2Rpdj4nKS5hcHBlbmRUbyggJyNzY29yZScgKSAgICAgIFxyXG4gICAgJCggJzxkaXYgaWQ9XCJmYXRhbGl0eVwiPjwvZGl2PicpLmFwcGVuZFRvKCAnI3Njb3JlJyApICAgIFxyXG5cclxuICAgICQoICc8ZGl2IGlkPVwiYnV0dG9uU2VhcmNoV3JhcHBlclwiPjwvZGl2PicgKS5hcHBlbmRUbyggJ2JvZHknIClcclxuXHJcbiAgICAkKCAnPGJ1dHRvbiBpZD1cImJ1dHRvblN0YXJ0XCI+PC9idXR0b24+JyApLmFwcGVuZFRvKCAnI2J1dHRvblNlYXJjaFdyYXBwZXInICkgIFxyXG4gICAgJCggJyNidXR0b25TdGFydCcgKS5oaWRlKClcclxuXHJcbiAgICAkKCAnPGJ1dHRvbiBpZD1cImJ1dHRvblNlYXJjaFwiPjwvYnV0dG9uPicgKS5hcHBlbmRUbyggJyNidXR0b25TZWFyY2hXcmFwcGVyJyApIFxyXG4gICAgJCggJzxpbWcgc3JjPVwiYXBwL2ltZ3MvYnRuU3RhcnQucG5nXCIvPicgKS5hcHBlbmRUbyggJyNidXR0b25TZWFyY2gnICkgXHJcbiAgICAkKCAnPHAgaWQ9XCJzZWFyY2hUZXh0XCIgPlNlYXJjaCBlbmVteTwvcD4nICkuYXBwZW5kVG8oICcjYnV0dG9uU2VhcmNoJyApXHJcbiAgICB0aGlzLmhpZGVCdXR0b25TZWFyY2goKVxyXG5cclxuICAgICQoIFwiPGRpdiBpZD0nYnV0dG9uc0Nob2ljZVdyYXBwZXInPjwvZGl2PlwiICkuYXBwZW5kVG8oIFwiYm9keVwiICkgICAgXHJcbiAgICAkKCBcIjxidXR0b24gY2xhc3M9J2J1dHRvbnNDaG9pY2UnIGlkPSdzdG9uZScgdmFsdWU9J3N0b25lJz48aW1nIHNyYz0nYXBwL2ltZ3MvYnRuU3RvbmUucG5nJy8+PC9idXR0b24+XCIgKS5hcHBlbmRUbyggXCIjYnV0dG9uc0Nob2ljZVdyYXBwZXJcIiApIFxyXG4gICAgJCggXCI8YnV0dG9uIGNsYXNzPSdidXR0b25zQ2hvaWNlJyBpZD0nc2Npc3NvcnMnIHZhbHVlPSdzY2lzc29ycyc+PGltZyBzcmM9J2FwcC9pbWdzL2J0blNuaXBlLnBuZycvPjwvYnV0dG9uPlwiICkuYXBwZW5kVG8oIFwiI2J1dHRvbnNDaG9pY2VXcmFwcGVyXCIgKSAgICBcclxuICAgICQoIFwiPGJ1dHRvbiBjbGFzcz0nYnV0dG9uc0Nob2ljZScgaWQ9J3BhcGVyJyB2YWx1ZT0ncGFwZXInPjxpbWcgc3JjPSdhcHAvaW1ncy9idG5QYXBlci5wbmcnLz48L2J1dHRvbj5cIiApLmFwcGVuZFRvKCBcIiNidXR0b25zQ2hvaWNlV3JhcHBlclwiIClcclxuICAgIHRoaXMuaGlkZUJ1dHRvbnNDaG9pY2UoKVxyXG4gICAgXHJcbiAgICB0aGlzLnJlc2l6ZVVpKCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICB9XHJcblxyXG4gIHJlc2l6ZVVpKCkge1xyXG4gICAgbGV0IGggPSB3aW5kb3cuaW5uZXJIZWlnaHRcclxuICAgIGxldCBzdGVwID0gaC8yMFxyXG4gICAgJCggJyNidXR0b25TdGFydCcpLmNzcyh7IFxyXG4gICAgICAgICdoZWlnaHQnOiAgICAgIHN0ZXAqMi4zICsgJ3B4JyxcclxuICAgICAgICAnd2lkdGgnOiAgICAgICBzdGVwKjguNSArICdweCcsIFxyXG4gICAgICAgICdmb250LXNpemUnOiAgIHN0ZXAqMC43ICsgJ3B4JyAgICAgIFxyXG4gICAgICB9KSAgICBcclxuICAgICQoICcjYnV0dG9uc0Nob2ljZVdyYXBwZXInICkuY3NzKCB7ICdoZWlnaHQnOiBzdGVwKjIuNSArICdweCcgfSApICAgIFxyXG4gICAgJCggJy5idXR0b25zQ2hvaWNlJyApLmNzcyh7IFxyXG4gICAgICAgICd3aWR0aCc6ICAgICAgIHN0ZXAqMi44ICsgJ3B4JyxcclxuICAgICAgICAnaGVpZ2h0JzogICAgICBzdGVwKjIuMyArICdweCcgXHJcbiAgICAgIH0pIFxyXG4gICAgJCggJyNidXR0b25TZWFyY2hXcmFwcGVyJyApLmNzcyggeyAnaGVpZ2h0Jzogc3RlcCoyLjUgKyAncHgnIH0gKSAgIFxyXG4gICAgJCggJyNidXR0b25TZWFyY2gnKS5jc3MoeyBcclxuICAgICAgICAnaGVpZ2h0JzogICAgICBzdGVwKjIuMyArICdweCcsXHJcbiAgICAgICAgJ3dpZHRoJzogICAgICAgc3RlcCo4LjUgKyAncHgnIFxyXG4gICAgICB9KVxyXG4gICAgJCggJyNzZWFyY2hUZXh0JyApLmNzcyh7XHJcbiAgICAgICAgJ2ZvbnQtc2l6ZSc6ICAgc3RlcCowLjcgKyAncHgnLCBcclxuICAgICAgICAnbWFyZ2luLXRvcCc6ICBzdGVwKjAuOCArICdweCcgICAgICAgICAgIFxyXG4gICAgICB9KSAgXHJcbiAgICAkKCAnI3Njb3JlV3JhcHBlcicgKS5jc3MoIHsgJ3dpZHRoJzogc3RlcCoxMCArICdweCcgfSApICAgXHJcbiAgICAkKCAnI3Njb3JlJyApLmNzcyh7IFxyXG4gICAgICAgICd3aWR0aCc6ICAgICAgIHN0ZXAqNyArICdweCcsXHJcbiAgICAgICAgJ21hcmdpbi1sZWZ0Jzogc3RlcCo3ICsgJ3B4JyxcclxuICAgICAgICAnbWFyZ2luLXRvcCc6ICBzdGVwKjAuNyArICdweCdcclxuICAgICAgfSlcclxuICAgICQoICcucGxheWVyc05hbWVzJyApLmNzcyh7XHJcbiAgICAgICAgJ2hlaWdodCc6ICAgICAgc3RlcCoxLjEgKyAncHgnLFxyXG4gICAgICAgICdmb250LXNpemUnOiAgIHN0ZXAqMC4zICsgJ3B4J1xyXG4gICAgICB9KSBcclxuICAgICQoICcubmFtZVBsJyApLmNzcyh7XHJcbiAgICAgICAgJ2ZvbnQtc2l6ZSc6ICAgc3RlcCowLjUgKyAncHgnICAgICBcclxuICAgIH0pXHJcbiAgICB0aW1lcldpZHRoID0gc3RlcCozICAgICAgICAgXHJcbiAgICAkKCAnLnJvdW5kVGltZXInICkuY3NzKHtcclxuICAgICAgICAnd2lkdGgnOiAgICAgICB0aW1lcldpZHRoICsgJ3B4JywgXHJcbiAgICAgICAgJ2hlaWdodCc6ICAgICAgc3RlcCowLjggKyAncHgnLFxyXG4gICAgICAgICdtYXJnaW4tdG9wJzogIHN0ZXAqMC4xICsgJ3B4JyAgICBcclxuICAgICAgfSlcclxuICAgICQoICcjdGltZXJMaW5lJyApLmNzcyh7XHJcbiAgICAgICAgJ3dpZHRoJzogICAgICAgdGltZXJXaWR0aCoxLjUgKyAncHgnLCBcclxuICAgICAgICAnaGVpZ2h0JzogICAgICBzdGVwICsgJ3B4JyAgICAgICAgICAgXHJcbiAgICAgIH0pXHJcbiAgICAkKCAnI3Jlc3VsdCcgKS5jc3Moe1xyXG4gICAgICAgICdmb250LXNpemUnOiAgIHN0ZXAqMC4zICsgJ3B4J1xyXG4gICAgICB9KSAgICAgXHJcbiAgICAkKCAnI2ZhdGFsaXR5U2lnbnMnICkuY3NzKHtcclxuICAgICAgICAnaGVpZ2h0JzogICAgICBzdGVwKjAuOCArICdweCdcclxuICAgICAgfSkgICAgICAgICBcclxuICAgIFxyXG4gIH1cclxuICBcclxuICBpbml0U3RhcnRCdXR0b24oIHVwZGF0ZUdhbWUgKSB7XHJcbiAgICAkKCAnI2J1dHRvblN0YXJ0JyApLnNob3coKVxyXG4gICAgJCggJyNidXR0b25TdGFydCcgKS5jbGljaygoKSA9PiB7XHJcbiAgICAgICQoICcjYnV0dG9uU3RhcnQnICkucmVtb3ZlKClcclxuICAgICAgdXBkYXRlR2FtZSgpXHJcbiAgICB9KSBcclxuICB9XHJcblxyXG5cclxuICAvKiogU1RBUlQgR0FNRSAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG4gIHNldENvbm5lY3Rpb25NZXNzYWdlKCBuYW1lICkge1xyXG4gICAgJCggJyNwbGF5ZXJOYW1lJyApLmh0bWwoICd5b3U8YnIvPjxzcGFuIGNsYXNzPVwibmFtZVBsXCI+JyArIG5hbWUgKyAnPC9zcGFuPicgKVxyXG4gICAgdGhpcy5yZXNpemVVaSgpXHJcbiAgfVxyXG5cclxuICBjbGlja0J1dHRvblNlYXJjaEVuZW15KCB1cGRhdGVHYW1lICkge1xyXG4gICAgJCggJyNidXR0b25TZWFyY2gnICkuY2xpY2soKCkgPT4geyAgICAgICAgIFxyXG4gICAgICB1cGRhdGVHYW1lKClcclxuICAgICAgJCggJyNidXR0b25TZWFyY2gnICkuaGlkZSgpICAgICAgIFxyXG4gICAgICAkKCAnI2VuZW15TmFtZScgKS5odG1sKCAnZW5lbXkgc2VhcmNoaW5nIC4uLiAnICkgIFxyXG4gICAgICB0aGlzLnJlc2l6ZVVpKCkgICAgICAgICAgIFxyXG4gICAgfSlcclxuICB9XHJcbiAgICBcclxuICBzZXRNZXNzYWdlU2VhcmNoRW5lbXkoIG5hbWUgKSB7XHJcbiAgICAkKCAnI2VuZW15TmFtZScgKS5odG1sKCAnZW5lbXk8YnIvPjxzcGFuIGNsYXNzPVwibmFtZVBsXCI+ICcgKyBuYW1lICsgJzwvc3Bhbj4nIClcclxuICAgIHRoaXMucmVzaXplVWkoKVxyXG4gIH1cclxuXHJcbiAgc2hvd0J1dHRvblNlYXJjaCgpIHsgJCggJyNidXR0b25TZWFyY2gnICkuc2hvdygpIH0gIFxyXG5cclxuICBoaWRlQnV0dG9uU2VhcmNoKCkgeyAkKCAnI2J1dHRvblNlYXJjaCcgKS5oaWRlKCkgfSAgICBcclxuXHJcblxyXG4gIC8qIFJPVU5EICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbiAgc3RhcnRBbmltYXRpb25Sb3VuZFRpbWVyKCB0ICkge1xyXG4gICAgJCggJzxkaXYgY2xhc3M9XCJyb3VuZFRpbWVyXCIgaWQ9XCJyJyArIHRoaXMucm91bmQgKyAnXCI+PC9kaXY+JykuYXBwZW5kVG8oICcjc2NvcmVzJyApXHJcbiAgICAkKCAnPGRpdiBpZD1cInRpbWVyTGluZVwiPjwvZGl2PicgKS5hcHBlbmRUbyggJyNyJyArIHRoaXMucm91bmQgKVxyXG5cclxuICAgIGlmICggdGhpcy5yb3VuZCA+IDYgKSB7IFxyXG4gICAgICBsZXQgZGVsUm91bmQgPSB0aGlzLnJvdW5kLTcgICAgICBcclxuICAgICAgJCggJyNyJysgZGVsUm91bmQgKS5yZW1vdmUoKVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICB0aW1lck1hcmdpbiA9IHRcclxuICAgIHRoaXMucmVzaXplVWkoKSAgXHJcbiAgICBhbmltYXRpb25Sb3VuZFRpbWVyKClcclxuICB9XHJcblxyXG4gIGNsaWNrQnV0dG9uc0Nob2ljZUhlcm8oIHVwZGF0ZUdhbWUsIGlzUmVkcmF3QnV0dG9ucyApIHtcclxuICAgICQoICcuYnV0dG9uc0Nob2ljZScgKS5jbGljaygoIGUgKSA9PiB7XHJcbiAgICAgIGlmICggaXNSZWRyYXdCdXR0b25zKCkgKSB7XHJcbiAgICAgICAgdGhpcy5yZWRyYXdDaG9pY2VCdXR0b25zKCBlLnRhcmdldC52YWx1ZSApICAgXHJcbiAgICAgIH1cclxuICAgICAgdXBkYXRlR2FtZSggZSApXHRcclxuICAgIH0pICBcclxuICB9IFxyXG5cclxuICBzaG93QnV0dG9uc0Nob2ljZSgpIHsgJCggJyNidXR0b25zQ2hvaWNlV3JhcHBlcicgKS5zaG93KCkgfVxyXG5cclxuICByZWRyYXdDaG9pY2VCdXR0b25zKCB2YWxsICkge1xyXG4gICAgaWYgKCB2YWxsID09PSAnc3RvbmUnICkge1xyXG4gICAgICAkKCAnI3NjaXNzb3JzJyApLmh0bWwoICc8aW1nIHNyYz1cImFwcC9pbWdzL2J0blNuaXBlX2IucG5nXCIvPicgKSAgXHJcbiAgICAgICQoICcjcGFwZXInICkuaHRtbCggJzxpbWcgc3JjPVwiYXBwL2ltZ3MvYnRuUGFwZXJfYi5wbmdcIi8+JyApICAgICAgICBcclxuICAgIH1cclxuICAgIGlmICggdmFsbCA9PT0gJ3NjaXNzb3JzJyApIHtcclxuICAgICAgJCggJyNzdG9uZScgKS5odG1sKCAnPGltZyBzcmM9XCJhcHAvaW1ncy9idG5TdG9uZV9iLnBuZ1wiLz4nICkgIFxyXG4gICAgICAkKCAnI3BhcGVyJyApLmh0bWwoICc8aW1nIHNyYz1cImFwcC9pbWdzL2J0blBhcGVyX2IucG5nXCIvPicgKSAgICAgICAgXHJcbiAgICB9ICBcclxuICAgIGlmICggdmFsbCA9PSAncGFwZXInICkge1xyXG4gICAgICAkKCAnI3N0b25lJyApLmh0bWwoICc8aW1nIHNyYz1cImFwcC9pbWdzL2J0blN0b25lX2IucG5nXCIvPicgKSAgXHJcbiAgICAgICQoICcjc2Npc3NvcnMnICkuaHRtbCggJzxpbWcgc3JjPVwiYXBwL2ltZ3MvYnRuU25pcGVfYi5wbmdcIi8+JyApICAgICAgICBcclxuICAgIH1cclxuICAgIGlmICggdmFsbCA9PT0gJ3Nob3cnKSB7XHJcbiAgICAgICQoICcjc3RvbmUnICkuaHRtbCggJzxpbWcgc3JjPVwiYXBwL2ltZ3MvYnRuU3RvbmUucG5nXCIvPicgKSAgXHJcbiAgICAgICQoICcjc2Npc3NvcnMnICkuaHRtbCggJzxpbWcgc3JjPVwiYXBwL2ltZ3MvYnRuU25pcGUucG5nXCIvPicgKVxyXG4gICAgICAkKCAnI3BhcGVyJyApLmh0bWwoICc8aW1nIHNyYz1cImFwcC9pbWdzL2J0blBhcGVyLnBuZ1wiLz4nICkgICAgICAgICAgICBcclxuICAgIH0gICBcclxuICB9IFxyXG4gIFxyXG4gIGhpZGVCdXR0b25zQ2hvaWNlKCkgeyAkKCAnI2J1dHRvbnNDaG9pY2VXcmFwcGVyJyApLmhpZGUoKSB9ICBcclxuXHJcbiAgc3RvcEFuaW1hdGlvblJvdW5kVGltZXIoKSB7XHJcbiAgICBjbGVhclRpbWVvdXQoIHRpbWVyUm91bmQgKVxyXG4gIH1cclxuXHJcbiAgZHJhd1JvdW5kUmVzdWx0KCBsYXN0Um91bmRSZXN1bHQgKSB7XHJcbiAgICB0aGlzLnN0b3BBbmltYXRpb25Sb3VuZFRpbWVyKClcclxuICAgICQoICcjdGltZXJMaW5lJyApLnJlbW92ZSgpXHJcbiAgICBsZXQgbXlDaG9pY2UgPSBnZXRDaGlvY2VQaWN0KCBsYXN0Um91bmRSZXN1bHQubXlDaG9pY2UgKVxyXG4gICAgbGV0IGVuQ2hvaWNlID0gZ2V0Q2hpb2NlUGljdCggbGFzdFJvdW5kUmVzdWx0LmVuZW15Q2hvaWNlIClcclxuICAgICQoICcjcicgKyB0aGlzLnJvdW5kICkuaHRtbCggZW5DaG9pY2UgKyAnIDxpbWcgc3JjPVwiYXBwL2ltZ3MvcG9pbnRzLnBuZ1wiPiAnICsgbXlDaG9pY2UgKVxyXG4gICAgJCggJyNyJyArIHRoaXMucm91bmQgKS5jc3MoIHsgJ2JhY2tncm91bmQtY29sb3InOiBnZXRCYWNrQ29sb3IoIGxhc3RSb3VuZFJlc3VsdC53aW5uZXIgKSB9ICkgIFxyXG4gICAgdGhpcy5yb3VuZCArKyAgICAgXHJcbiAgfVxyXG5cclxuXHJcbiAgLyogRU5EIEdBTUUgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuICBzZXRNZXNzYWdlU3RhcnRGYXRhbGl0eSggdiApIHtcclxuICAgIGlmICggdiA9PT0gJ21lJyApIHtcclxuICAgICAgJCggJzxkaXYgc3R5bGU9XCJjb2xvcjogI2RmYTQzY1wiPjxici8+PGJyLz5Zb3UgV0lOICE8YnIvPjxici8+PC9kaXY+JyApLmFwcGVuZFRvKCAnI3Jlc3VsdCcgKSAgXHJcbiAgICAgICQoICc8ZGl2IHN0eWxlPVwiY29sb3I6ICNmZjAwMDBcIj5GYXRhbGl0eTo8YnIvPjxici8+IDwvZGl2PicgKS5hcHBlbmRUbyggJyNmYXRhbGl0eScgKSAgXHJcbiAgICAgICQoICc8ZGl2IGlkPVwiZmF0YWxpdHlTaWduc1wiPjwvZGl2PicgKS5hcHBlbmRUbyggJyNmYXRhbGl0eScgKVxyXG4gICAgICB0aGlzLnJlc2l6ZVVpKCkgICAgICAgICAgXHJcbiAgICB9XHJcbiAgICBpZiAoIHYgPT09ICdlbmVteScgKSB7XHJcbiAgICAgICQoICc8ZGl2IHN0eWxlPVwiY29sb3I6ICNkZmE0M2NcIj48YnIvPjxici8+WW91IExPU0UuPGJyLz48YnIvPjwvZGl2PicgKS5hcHBlbmRUbyggJyNyZXN1bHQnICkgIFxyXG4gICAgICAkKCAnPGRpdiBzdHlsZT1cImNvbG9yOiAjZmYwMDAwXCI+RmF0YWxpdHkuLi48YnIvPjxici8+IDwvZGl2PicgKS5hcHBlbmRUbyggJyNmYXRhbGl0eScgKSAgXHJcbiAgICB9ICAgIFxyXG4gIH1cclxuICAgIFxyXG4gIGFkZFZhbHVlRmF0YWxpdHkoIHZhbCApIHsgXHJcbiAgICAkKCBnZXRDaGlvY2VQaWN0KCB2YWwgKSApLmFwcGVuZFRvKCAnI2ZhdGFsaXR5U2lnbnMnICkgXHJcbiAgfVxyXG5cclxuICBzZXRNZXNzYWdlKCBtZXNzICkge1xyXG4gICAgbGV0IGggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggJ3Jlc3VsdCcgKVxyXG4gICAgaWYgKCBoLmlubmVySFRNTCAhPSAnJyApIHJldHVyblxyXG4gICAgJCgnI3Jlc3VsdCcpLmFwcGVuZCggJzxicj4nICsgbWVzcyArICc8L2JyPicgKSBcclxuICB9XHJcblxyXG4gIHJlbW92ZUZhdGFsaXR5QmFyKCkge1xyXG4gICAgJCggJyNmYXRhbGl0eScgKS5odG1sKCAnJyApIFxyXG4gIH1cclxuXHJcbiAgY2xlYXJTY3JlZW4oKSB7XHJcbiAgICBjbGVhclRpbWVvdXQoIHRpbWVyUm91bmQgKVxyXG4gICAgJCggJyNyZXN1bHQnICkuaHRtbCggJycgKSBcclxuICAgICQoICcjc2NvcmVzJyApLmh0bWwoICcnICkgXHJcbiAgICAkKCAnI2VuZW15TmFtZScgKS5odG1sKCAnJyApIFxyXG4gIH1cclxufVxyXG4gIFxyXG5cclxuXHJcblxyXG5jb25zdCBhbmltYXRpb25Sb3VuZFRpbWVyID0gKCkgPT4ge1xyXG4gIGxldCBtID0gdGltZXJXaWR0aCAtIHRpbWVyTWFyZ2luLzcwMDAqdGltZXJXaWR0aFxyXG4gICQoICcjdGltZXJMaW5lJyApLmNzcyggeyAnbWFyZ2luTGVmdCc6IG0gICsgJ3B4JyB9ICkgIFxyXG4gIHRpbWVyTWFyZ2luIC09IDEwMCAgXHJcbiAgdGltZXJSb3VuZCA9IHNldFRpbWVvdXQoIGFuaW1hdGlvblJvdW5kVGltZXIsIDEwMCApXHJcbn1cclxuXHJcbmNvbnN0IGdldENoaW9jZVBpY3QgPSB2ID0+IHtcclxuICBpZiAoIHYgPT0gJ3N0b25lJyApIHJldHVybiAnPGltZyBzcmM9XCJhcHAvaW1ncy9idG5TdG9uZS5wbmdcIi8+J1xyXG4gIGlmICggdiA9PSAnc2Npc3NvcnMnICkgcmV0dXJuICc8aW1nIHNyYz1cImFwcC9pbWdzL2J0blNuaXBlLnBuZ1wiLz4nXHJcbiAgaWYgKCB2ID09ICdwYXBlcicgKSByZXR1cm4gJzxpbWcgc3JjPVwiYXBwL2ltZ3MvYnRuUGFwZXIucG5nXCIvPidcclxuICBpZiAoIHYgPT0gJ3RpbWVvdXQnICkgcmV0dXJuICc8aW1nIHNyYz1cImFwcC9pbWdzL2J0blN0YXJ0LnBuZ1wiLz4nICBcclxufVxyXG5cclxuY29uc3QgZ2V0QmFja0NvbG9yID0gdiA9PiB7XHJcbiAgaWYgKCB2ID09ICdtZScgKSByZXR1cm4gJyM5NThkMGQnIFxyXG4gIGlmICggdiA9PSAnZW5lbXknICkgcmV0dXJuICcjNWUyMjA4JyBcclxuICBpZiAoIHYgPT0gJ2RyYXcnICkgcmV0dXJuICcjNDA0MDQwJyAgICAgXHJcbn1cclxuXHJcblxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFVpXHJcblxyXG4iLCLvu79cclxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKio7XHJcbiAqICAgICAgICAgICAgICBfICAgICAgICAqICBQcm9qZWN0ICAgICAgICA6ICBTVE9ORVxyXG4gKiAgICAgICAgX19fX18vXFxfXFwgICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tO1xyXG4gKiAgICAgICAvXFwgICAvIC8gLyAgICAgICogIFByb2dyYW0gbmFtZSAgIDogIGNsaWVudFxyXG4gKiAgICBfXy9fIFxcICBcXC9fLyBcXCAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLTtcclxuICogICAvXFxfX19cXCBcXF9fX19fX19cXCAgICAqICBBdXRob3IgICAgICAgICA6ICB3d3cub3RyaXNvdmFuby5ydVxyXG4gKiAgIFxcL19fXy8gLyAgX18gICAvICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS07XHJcbiAqICAgICAgXFwgIC8gIC9cXCBcXCAvICAgICAqICBEYXRlICAgICAgICAgICA6ICAwMS4xMS4yMDE3IFxyXG4gKiAgICAgICBcXC9fX19cXCBcXF9cXCAgICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS07XHJcbiAqICAgICAgICAgICAgIFxcL18vICAgICAgKiAgUHVycG9zZSAgICAgICAgOiAgZ2FtZSAyZFxyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLTtcclxuICogICAgICAgICAgICAgICAgICAgICAgICogIExpY2Vuc2UgICAgICAgIDogIE1JVCAgICAgICAgIFxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cdFxyXG5cclxuIFxyXG4ndXNlIHN0cmljdCdcclxuXHJcblxyXG5jbGFzcyBDbGllbnQge1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMucmVzcG9uc2VFcnJvciA9ICgpID0+IHt9XHJcbiAgfVxyXG4gIFxyXG4gIGdldFNpZ25JZkNvbm5lY3RGaXJzdCggdXBkYXRlR2FtZSApIHtcdCAgXHJcbiAgICAkLmdldCggJy9hcGkvc2Vzc2lvbi9oZWxsbycgKVxyXG4gICAgICAuZmFpbCgoKSA9PiB7IHRoaXMucmVzcG9uc2VFcnJvcigpIH0pXHJcbiAgICAgIC5kb25lKCggcmVzdWx0ICkgPT4geyB1cGRhdGVHYW1lKCByZXN1bHQgKSB9KVxyXG4gIH0gIFxyXG5cclxuICBzZW5kU2lnblRvRmluZEVuZW15KCB1cGRhdGVHYW1lICkge1xyXG4gICAgJC5wb3N0KCAnL2FwaS91c2VyL2ZpbmQtZ2FtZScgKVxyXG4gICAgICAuZmFpbCgoKSA9PiB7IHRoaXMucmVzcG9uc2VFcnJvcigpIH0pXHJcbiAgICAgIC50aGVuKCggcmVzdWx0ICkgPT4geyB1cGRhdGVHYW1lKCByZXN1bHQgKSB9KVxyXG4gIH1cclxuXHJcbiAgZ2V0U2lnbkFib3V0VXBkYXRlR2FtZVJlc3VsdCggdXBkYXRlR2FtZSApIHtcclxuICAgICQuZ2V0KCcvYXBpL2dhbWUnKVxyXG4gICAgICAuZmFpbCgoKSA9PiB7IHRoaXMucmVzcG9uc2VFcnJvcigpIH0pICAgICBcclxuICAgICAgLmRvbmUoKCByZXN1bHRzICkgPT4geyB1cGRhdGVHYW1lKCByZXN1bHRzICkgfSlcclxuICB9XHJcblxyXG4gIHNlbmRIZXJvQ2hvaWNlKCBjaG9pY2UsIHVwZGF0ZUdhbWUgKSB7IFxyXG4gICAgJC5wb3N0KCAnL2FwaS9nYW1lL21vdmU/Y2hvaWNlPScgKyBjaG9pY2UpXHJcbiAgICAgIC5mYWlsKCgpID0+IHsgdGhpcy5yZXNwb25zZUVycm9yKCkgfSkgICAgIFxyXG4gICAgICAudGhlbigoIHJlc3VsdCApID0+IHsgdXBkYXRlR2FtZSggcmVzdWx0ICkgfSkgICAgICBcclxuICB9XHJcblxyXG4gIHNlbmRSZWFkeUZvck5leHRSb3VuZCggdXBkYXRlR2FtZSApIHsgIFxyXG4gICAgJC5wb3N0KCAnL2FwaS9nYW1lL25leHQtcm91bmQnIClcclxuICAgICAgLmZhaWwoKCkgPT4geyB0aGlzLnJlc3BvbnNlRXJyb3IoKSB9KSAgICAgIFxyXG4gICAgICAudGhlbigoIHJlc3VsdCApID0+IHsgdXBkYXRlR2FtZSggcmVzdWx0ICkgfSkgIFxyXG4gIH1cclxuXHJcbiAgcG9zdEVuZW15SXNEaXNjb25uZWN0ZWQoKSB7XHJcbiAgICAkLnBvc3QoICcvYXBpL2dhbWUvZW5lbXktZGlzY29ubmVjdGVkJyApXHJcbiAgICAgIC5mYWlsKCgpID0+IHsgdGhpcy5yZXNwb25zZUVycm9yKCkgfSkgICAgIFxyXG4gICAgICAudGhlbigoIHJlc3VsdCApID0+IHt9KSAgICAgXHJcbiAgICB9XHJcblxyXG4gIHBvc3RXaW5uZXJSZXN1bHRGYXRhbGl0eSggcmVzdWx0RmF0YWxpdHksIHVwZGF0ZUdhbWUgKSB7XHJcbiAgICAkLnBvc3QoICcvYXBpL2dhbWUvZmF0YWxpdHk/aXM9JyArIHJlc3VsdEZhdGFsaXR5ICkgICAgICBcclxuICAgICAgLnRoZW4oKCByZXN1bHQgKSA9PiB7IHVwZGF0ZUdhbWUoIHJlc3VsdCApIH0pICAgIFx0XHRcclxuICB9XHJcblxyXG4gIGxvc2VyV2FpdFJlc3VsdEZhdGFsaXR5KCB1cGRhdGVHYW1lICkgeyAgICBcclxuICAgICQucG9zdCggJy9hcGkvZ2FtZS9pc0ZhdGFsaXR5RG9uZUZvckxvc2VyJyApXHJcbiAgICAgIC50aGVuKCggcmVzdWx0ICkgPT4geyB1cGRhdGVHYW1lKCByZXN1bHQgKSB9KVxyXG4gIH1cclxuXHJcbiAgc2V0RnVuY3Rpb25SZXNwb25zZUVycm9yKCBmdW5jICkgeyB0aGlzLnJlc3BvbnNlRXJyb3IgPSBmdW5jIH0gIFxyXG59XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ2xpZW50XHJcblxyXG5cclxuXHJcbiIsIlxyXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKjtcclxuICogICAgICAgICAgICAgIF8gICAgICAgICogIFByb2plY3QgICAgICAgIDogIFNUT05FXHJcbiAqICAgICAgICBfX19fXy9cXF9cXCAgICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS07XHJcbiAqICAgICAgIC9cXCAgIC8gLyAvICAgICAgKiAgUHJvZ3JhbSBuYW1lICAgOiAgZHJhdyBjYW52YXNcclxuICogICAgX18vXyBcXCAgXFwvXy8gXFwgICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS07XHJcbiAqICAgL1xcX19fXFwgXFxfX19fX19fXFwgICAgKiAgQXV0aG9yICAgICAgICAgOiAgd3d3Lm90cmlzb3Zhbm8ucnVcclxuICogICBcXC9fX18vIC8gIF9fICAgLyAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tO1xyXG4gKiAgICAgIFxcICAvICAvXFwgXFwgLyAgICAgKiAgRGF0ZSAgICAgICAgICAgOiAgMDEuMTEuMjAxNyBcclxuICogICAgICAgXFwvX19fXFwgXFxfXFwgICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tO1xyXG4gKiAgICAgICAgICAgICBcXC9fLyAgICAgICogIFB1cnBvc2UgICAgICAgIDogIGdhbWUgMmRcclxuICogICAgICAgICAgICAgICAgICAgICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS07XHJcbiAqICAgICAgICAgICAgICAgICAgICAgICAqICBMaWNlbnNlICAgICAgICA6ICBNSVQgICAgICAgICBcclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG5cclxuJ3VzZSBzdHJpY3QnXHJcblxyXG5sZXQgcmVuZGVyZXJcclxuXHJcblxyXG5jbGFzcyBDdHgge1xyXG4gXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICByZW5kZXJlciA9IG5ldyBQSVhJLkNhbnZhc1JlbmRlcmVyKCB3aW5kb3cuaW5uZXJIZWlnaHQqMC42LCB3aW5kb3cuaW5uZXJIZWlnaHQgKVxyXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCggcmVuZGVyZXIudmlldyApXHJcbiAgICByZW5kZXJlci52aWV3LmlkID0gJ2N0eCcgICAgXHJcbiAgICB0aGlzLnN0YWdlID0gbmV3IFBJWEkuU3RhZ2VcclxuXHJcbiAgICB0aGlzLnN0ZXAgPSBudWxsICBcclxuICAgIHRoaXMuc2NhbGUgPSBudWxsXHJcblxyXG4gICAgdGhpcy5jdXJyZW50U3ByaXRlSGVybyA9IG51bGxcclxuICAgIHRoaXMuY3VycmVudFNwcml0ZUVuZW15ID0gbnVsbFxyXG5cclxuICAgIHRoaXMucmVja29uV2luZG93U2l6ZSgpXHJcbiAgfVxyXG5cclxuICBsb2FkQXNzZXRzKCBvbkluaXQgKSB7XHJcbiAgICBQSVhJLmxvYWRlclxyXG4gICAgICAuYWRkKCAnYXBwL2ltZ3Mvc2lnbnMuanNvbicgKVxyXG4gICAgICAuYWRkKCAnYXBwL2ltZ3MvZmF0MDEuanNvbicgKSAgICAgIFxyXG4gICAgICAubG9hZCgoKSA9PiB7IFxyXG4gICAgICAgIHRoaXMuaW5pdEFuaW1hdGlvbiggb25Jbml0ICkgXHJcbiAgICAgIH0pXHJcbiAgfVxyXG5cclxuICBpbml0QW5pbWF0aW9uKCBvbkluaXQgKSB7XHJcblxyXG4gICAgbGV0IHBvc1hIZXJvID0gdGhpcy5zdGVwKjYgXHJcbiAgICBsZXQgcG9zWUhlcm8gPSB0aGlzLnN0ZXAqMTFcclxuICAgIGxldCBwb3NYRW5lbXkgPSB0aGlzLnN0ZXAqNVxyXG4gICAgbGV0IHBvc1lFbmVteSA9IHRoaXMuc3RlcCo3IFxyXG4gICAgXHJcbiAgICAvKiogQU5JTUFUSU9OIFdBSVQgKi9cclxuXHJcbiAgICBsZXQgZnJhbWVzV2FpdCA9IFtdXHJcbiAgICBmb3IgKCBsZXQgaSA9IDE7IGkgPCA4OyBpICsrICkge1xyXG4gICAgICBsZXQgdmFsID0gaSA8IDEwID8gJzAnICsgaSA6IGlcclxuICAgICAgZnJhbWVzV2FpdC5wdXNoKCBQSVhJLlRleHR1cmUuZnJvbUZyYW1lKCAnd2FpdCcgKyB2YWwgKyAnLnBuZycgKSApXHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy53YWl0SGVybyA9IG5ldyBQSVhJLmV4dHJhcy5BbmltYXRlZFNwcml0ZSggZnJhbWVzV2FpdCApXHJcbiAgICB0aGlzLndhaXRIZXJvLnggPSBwb3NYSGVyb1xyXG4gICAgdGhpcy53YWl0SGVyby55ID0gcG9zWUhlcm9cclxuICAgIHRoaXMud2FpdEhlcm8uc2NhbGUuc2V0KCB0aGlzLnNjYWxlLCB0aGlzLnNjYWxlIClcclxuICAgIHRoaXMud2FpdEhlcm8uYW5jaG9yLnNldCggMC41IClcclxuICAgIHRoaXMud2FpdEhlcm8uYW5pbWF0aW9uU3BlZWQgPSAwLjEyXHJcblxyXG4gICAgXHJcbiAgICB0aGlzLndhaXRFbmVteSA9IG5ldyBQSVhJLmV4dHJhcy5BbmltYXRlZFNwcml0ZSggZnJhbWVzV2FpdCApO1xyXG4gICAgdGhpcy53YWl0RW5lbXkueCA9IHBvc1hFbmVteVxyXG4gICAgdGhpcy53YWl0RW5lbXkueSA9IHBvc1lFbmVteVxyXG4gICAgdGhpcy53YWl0RW5lbXkuc2NhbGUuc2V0KCB0aGlzLnNjYWxlLCB0aGlzLnNjYWxlIClcclxuICAgIHRoaXMud2FpdEVuZW15LmFuY2hvci5zZXQoMC41KTsgIFxyXG4gICAgdGhpcy53YWl0RW5lbXkucm90YXRpb24gPSBNYXRoLlBJXHJcbiAgICB0aGlzLndhaXRFbmVteS5hbmltYXRpb25TcGVlZCA9IDAuMTU7XHJcbiAgXHJcbiAgICBcclxuICAgIC8qKiBBTklNQVRJT04gQ09NQSAqL1xyXG5cclxuICAgIGxldCBmcmFtZXNDb21hID0gW11cclxuICAgIGZvciAoIGxldCAgaSA9IDE7IGkgPCAxMTsgaSArKyApIHtcclxuICAgICAgbGV0IHZhbCA9IGkgPCAxMCA/ICcwJyArIGkgOiBpO1xyXG4gICAgICBmcmFtZXNDb21hLnB1c2goIFBJWEkuVGV4dHVyZS5mcm9tRnJhbWUoICdjb21hJyArIHZhbCArICcucG5nJyApIClcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmNvbWFIZXJvID0gbmV3IFBJWEkuZXh0cmFzLkFuaW1hdGVkU3ByaXRlKCBmcmFtZXNDb21hIClcclxuICAgIHRoaXMuY29tYUhlcm8ueCA9IHBvc1hIZXJvXHJcbiAgICB0aGlzLmNvbWFIZXJvLnkgPSBwb3NZSGVyb1xyXG4gICAgdGhpcy5jb21hSGVyby5zY2FsZS5zZXQoIHRoaXMuc2NhbGUsIHRoaXMuc2NhbGUgKVxyXG4gICAgdGhpcy5jb21hSGVyby5hbmNob3Iuc2V0KCAwLjUgKVxyXG4gICAgdGhpcy5jb21hSGVyby5hbmltYXRpb25TcGVlZCA9IDAuMTJcclxuXHJcbiAgICB0aGlzLmNvbWFFbmVteSA9IG5ldyBQSVhJLmV4dHJhcy5BbmltYXRlZFNwcml0ZSggZnJhbWVzQ29tYSApXHJcbiAgICB0aGlzLmNvbWFFbmVteS54ID0gcG9zWEVuZW15XHJcbiAgICB0aGlzLmNvbWFFbmVteS55ID0gcG9zWUVuZW15XHJcbiAgICB0aGlzLmNvbWFFbmVteS5zY2FsZS5zZXQoIHRoaXMuc2NhbGUsIHRoaXMuc2NhbGUgKVxyXG4gICAgdGhpcy5jb21hRW5lbXkuYW5jaG9yLnNldCgwLjUpO1xyXG4gICAgdGhpcy5jb21hRW5lbXkucm90YXRpb24gPSBNYXRoLlBJICBcclxuICAgIHRoaXMuY29tYUVuZW15LmFuaW1hdGlvblNwZWVkID0gMC4xMjtcclxuICAgIFxyXG5cclxuICAgIC8qKiBBTklNQVRJT04gS1VMQUsgKi9cclxuXHJcbiAgICBsZXQgZnJhbWVzS3VsYWsgPSBbXVxyXG4gICAgZm9yICggbGV0ICBpID0gMTsgaSA8IDc7IGkgKysgKSB7XHJcbiAgICAgIGxldCB2YWwgPSBpIDwgMTAgPyAnMCcgKyBpIDogaVxyXG4gICAgICBmcmFtZXNLdWxhay5wdXNoKCBQSVhJLlRleHR1cmUuZnJvbUZyYW1lKCAnY2hvaWNlJyArIHZhbCArICcucG5nJyApIClcclxuICAgIH1cclxuICAgIHRoaXMua3VsYWtIZXJvID0gbmV3IFBJWEkuZXh0cmFzLkFuaW1hdGVkU3ByaXRlKCBmcmFtZXNLdWxhayApXHJcbiAgICB0aGlzLmt1bGFrSGVyby54ID0gcG9zWEhlcm9cclxuICAgIHRoaXMua3VsYWtIZXJvLnkgPSBwb3NZSGVyb1xyXG4gICAgdGhpcy5rdWxha0hlcm8uc2NhbGUuc2V0KCB0aGlzLnNjYWxlLCB0aGlzLnNjYWxlIClcclxuICAgIHRoaXMua3VsYWtIZXJvLmFuY2hvci5zZXQoIDAuNSApXHJcbiAgICB0aGlzLmt1bGFrSGVyby5hbmltYXRpb25TcGVlZCA9IDAuMTJcclxuXHJcbiAgICB0aGlzLmt1bGFrRW5lbXkgPSBuZXcgUElYSS5leHRyYXMuQW5pbWF0ZWRTcHJpdGUoIGZyYW1lc0t1bGFrIClcclxuICAgIHRoaXMua3VsYWtFbmVteS54ID0gcG9zWEVuZW15XHJcbiAgICB0aGlzLmt1bGFrRW5lbXkueSA9IHBvc1lFbmVteVxyXG4gICAgdGhpcy5rdWxha0VuZW15LnNjYWxlLnNldCggdGhpcy5zY2FsZSwgdGhpcy5zY2FsZSApXHJcbiAgICB0aGlzLmt1bGFrRW5lbXkuYW5jaG9yLnNldCggMC41ICkgIFxyXG4gICAgdGhpcy5rdWxha0VuZW15LnJvdGF0aW9uID0gTWF0aC5QSVxyXG4gICAgdGhpcy5rdWxha0VuZW15LmFuaW1hdGlvblNwZWVkID0gMC4xMiAgXHJcbiAgIFxyXG5cclxuICAgIC8qKiBBTklNQVRJT04gU1RPTkUgKi9cclxuXHJcbiAgICBsZXQgZnJhbWVzU3RvbmUgPSBbXVxyXG4gICAgZm9yICggbGV0IGkgPSAxOyBpIDwgNDsgaSArKyApIHtcclxuICAgICAgbGV0IHZhbCA9IGkgPCAxMCA/ICcwJyArIGkgOiBpXHJcbiAgICAgIGZyYW1lc1N0b25lLnB1c2goIFBJWEkuVGV4dHVyZS5mcm9tRnJhbWUoICdzdG9uZScgKyB2YWwgKyAnLnBuZycgKSApXHJcbiAgICB9XHJcbiAgICB0aGlzLnN0b25lSGVybyA9IG5ldyBQSVhJLmV4dHJhcy5BbmltYXRlZFNwcml0ZSggZnJhbWVzU3RvbmUgKVxyXG4gICAgdGhpcy5zdG9uZUhlcm8ueCA9IHBvc1hIZXJvXHJcbiAgICB0aGlzLnN0b25lSGVyby55ID0gcG9zWUhlcm9cclxuICAgIHRoaXMuc3RvbmVIZXJvLnNjYWxlLnNldCggdGhpcy5zY2FsZSwgdGhpcy5zY2FsZSApXHJcbiAgICB0aGlzLnN0b25lSGVyby5hbmNob3Iuc2V0KDAuNSlcclxuICAgIHRoaXMuc3RvbmVIZXJvLmFuaW1hdGlvblNwZWVkID0gMC4wNVxyXG4gICAgdGhpcy5zdG9uZUhlcm8ubG9vcCA9IGZhbHNlXHJcblxyXG4gICAgdGhpcy5zdG9uZUVuZW15ID0gbmV3IFBJWEkuZXh0cmFzLkFuaW1hdGVkU3ByaXRlKCBmcmFtZXNTdG9uZSApXHJcbiAgICB0aGlzLnN0b25lRW5lbXkueCA9IHBvc1hFbmVteVxyXG4gICAgdGhpcy5zdG9uZUVuZW15LnkgPSBwb3NZRW5lbXlcclxuICAgIHRoaXMuc3RvbmVFbmVteS5zY2FsZS5zZXQoIHRoaXMuc2NhbGUsIHRoaXMuc2NhbGUgKVxyXG4gICAgdGhpcy5zdG9uZUVuZW15LmFuY2hvci5zZXQoMC41KVxyXG4gICAgdGhpcy5zdG9uZUVuZW15LnJvdGF0aW9uID0gTWF0aC5QSSAgXHJcbiAgICB0aGlzLnN0b25lRW5lbXkuYW5pbWF0aW9uU3BlZWQgPSAwLjA1XHJcbiAgICB0aGlzLnN0b25lRW5lbXkubG9vcCA9IGZhbHNlICBcclxuICBcclxuXHJcbiAgICAvKiogQU5JTUFUSU9OIFBBUEVSICovXHJcblxyXG4gICAgbGV0IGZyYW1lc1BhcGVyID0gW11cclxuICAgIGZvciAoIGxldCBpID0gMjsgaSA8IDU7IGkgKysgKSB7XHJcbiAgICAgIGxldCB2YWwgPSBpIDwgMTAgPyAnMCcgKyBpIDogaVxyXG4gICAgICBmcmFtZXNQYXBlci5wdXNoKCBQSVhJLlRleHR1cmUuZnJvbUZyYW1lKCAncGFwZXInICsgdmFsICsgJy5wbmcnICkgKVxyXG4gICAgfVxyXG4gICAgdGhpcy5wYXBlckhlcm8gPSBuZXcgUElYSS5leHRyYXMuQW5pbWF0ZWRTcHJpdGUoIGZyYW1lc1BhcGVyIClcclxuICAgIHRoaXMucGFwZXJIZXJvLnggPSBwb3NYSGVyb1xyXG4gICAgdGhpcy5wYXBlckhlcm8ueSA9IHBvc1lIZXJvXHJcbiAgICB0aGlzLnBhcGVySGVyby5zY2FsZS5zZXQoIHRoaXMuc2NhbGUsIHRoaXMuc2NhbGUgKVxyXG4gICAgdGhpcy5wYXBlckhlcm8uYW5jaG9yLnNldCgwLjUpXHJcbiAgICB0aGlzLnBhcGVySGVyby5hbmltYXRpb25TcGVlZCA9IDAuMDVcclxuICAgIHRoaXMucGFwZXJIZXJvLmxvb3AgPSBmYWxzZSAgICAgXHJcblxyXG4gICAgdGhpcy5wYXBlckVuZW15ID0gbmV3IFBJWEkuZXh0cmFzLkFuaW1hdGVkU3ByaXRlKCBmcmFtZXNQYXBlciApXHJcbiAgICB0aGlzLnBhcGVyRW5lbXkueCA9IHBvc1hFbmVteVxyXG4gICAgdGhpcy5wYXBlckVuZW15LnkgPSBwb3NZRW5lbXlcclxuICAgIHRoaXMucGFwZXJFbmVteS5zY2FsZS5zZXQoIHRoaXMuc2NhbGUsIHRoaXMuc2NhbGUgKVxyXG4gICAgdGhpcy5wYXBlckVuZW15LmFuY2hvci5zZXQoMC41KVxyXG4gICAgdGhpcy5wYXBlckVuZW15LnJvdGF0aW9uID0gTWF0aC5QSSAgICAgXHJcbiAgICB0aGlzLnBhcGVyRW5lbXkuYW5pbWF0aW9uU3BlZWQgPSAwLjA1IFxyXG4gICAgdGhpcy5wYXBlckVuZW15Lmxvb3AgPSBmYWxzZSAgICAgICAgXHJcblxyXG5cclxuICAgIC8qKiBBTklNQVRJT04gU0NJU1NPUlMgKi9cclxuICAgIFxyXG4gICAgbGV0IGZyYW1lc1NjaXNzb3JzID0gW11cclxuICAgIGZvciAoIGxldCBpID0gMjsgaSA8IDU7IGkgKysgKSB7XHJcbiAgICAgIGxldCB2YWwgPSBpIDwgMTAgPyAnMCcgKyBpIDogaTtcclxuICAgICAgZnJhbWVzU2Npc3NvcnMucHVzaCggUElYSS5UZXh0dXJlLmZyb21GcmFtZSggJ3NjaXNzb3JzJyArIHZhbCArICcucG5nJyApIClcclxuICAgIH1cclxuICAgIHRoaXMuc2Npc3NvcnNIZXJvID0gbmV3IFBJWEkuZXh0cmFzLkFuaW1hdGVkU3ByaXRlKCBmcmFtZXNTY2lzc29ycyApXHJcbiAgICB0aGlzLnNjaXNzb3JzSGVyby54ID0gcG9zWEhlcm9cclxuICAgIHRoaXMuc2Npc3NvcnNIZXJvLnkgPSBwb3NZSGVyb1xyXG4gICAgdGhpcy5zY2lzc29yc0hlcm8uc2NhbGUuc2V0KCB0aGlzLnNjYWxlLCB0aGlzLnNjYWxlIClcclxuICAgIHRoaXMuc2Npc3NvcnNIZXJvLmFuY2hvci5zZXQoMC41KVxyXG4gICAgdGhpcy5zY2lzc29yc0hlcm8uYW5pbWF0aW9uU3BlZWQgPSAwLjA1XHJcbiAgICB0aGlzLnNjaXNzb3JzSGVyby5sb29wID0gZmFsc2UgICAgXHJcblxyXG4gICAgdGhpcy5zY2lzc29yc0VuZW15ID0gbmV3IFBJWEkuZXh0cmFzLkFuaW1hdGVkU3ByaXRlKCBmcmFtZXNTY2lzc29ycyApXHJcbiAgICB0aGlzLnNjaXNzb3JzRW5lbXkueCA9IHBvc1hFbmVteVxyXG4gICAgdGhpcy5zY2lzc29yc0VuZW15LnkgPSBwb3NZRW5lbXlcclxuICAgIHRoaXMuc2Npc3NvcnNFbmVteS5zY2FsZS5zZXQoIHRoaXMuc2NhbGUsIHRoaXMuc2NhbGUgKVxyXG4gICAgdGhpcy5zY2lzc29yc0VuZW15LmFuY2hvci5zZXQoMC41KVxyXG4gICAgdGhpcy5zY2lzc29yc0VuZW15LnJvdGF0aW9uID0gTWF0aC5QSSAgIFxyXG4gICAgdGhpcy5zY2lzc29yc0VuZW15LmFuaW1hdGlvblNwZWVkID0gMC4wNSAgXHJcbiAgICB0aGlzLnNjaXNzb3JzRW5lbXkubG9vcCA9IGZhbHNlICBcclxuXHJcblxyXG4gICAgLyoqIEFOSU1BVElPTiBTSUdOUyAqL1xyXG4gIFxyXG4gICAgbGV0IGdvb2RTaWduRnJhbWUgPSBbXVxyXG4gICAgZ29vZFNpZ25GcmFtZS5wdXNoKCBQSVhJLlRleHR1cmUuZnJvbUZyYW1lKCAnc2lnbjAwLnBuZycgKSApICAgIFxyXG4gICAgZ29vZFNpZ25GcmFtZS5wdXNoKCBQSVhJLlRleHR1cmUuZnJvbUZyYW1lKCAnc2lnbjAxLnBuZycgKSApXHJcbiAgICBnb29kU2lnbkZyYW1lLnB1c2goIFBJWEkuVGV4dHVyZS5mcm9tRnJhbWUoICdzaWduMDUucG5nJyApIClcclxuICAgIGdvb2RTaWduRnJhbWUucHVzaCggUElYSS5UZXh0dXJlLmZyb21GcmFtZSggJ3NpZ24wNi5wbmcnICkgKVxyXG4gICAgZ29vZFNpZ25GcmFtZS5wdXNoKCBQSVhJLlRleHR1cmUuZnJvbUZyYW1lKCAnc2lnbjA3LnBuZycgKSApIFxyXG4gICAgZ29vZFNpZ25GcmFtZS5wdXNoKCBQSVhJLlRleHR1cmUuZnJvbUZyYW1lKCAnc2lnbjA4LnBuZycgKSApICAgXHJcbiAgICAgICAgICAgICAgXHJcbiAgICB0aGlzLnNpZ25IZXJvR29vZCA9IG5ldyBQSVhJLmV4dHJhcy5BbmltYXRlZFNwcml0ZSggZ29vZFNpZ25GcmFtZSApXHJcbiAgICB0aGlzLnNpZ25IZXJvR29vZC54ID0gcG9zWEhlcm8gXHJcbiAgICB0aGlzLnNpZ25IZXJvR29vZC55ID0gcG9zWUhlcm9cclxuICAgIHRoaXMuc2lnbkhlcm9Hb29kLnNjYWxlLnNldCggdGhpcy5zY2FsZSwgdGhpcy5zY2FsZSApXHJcbiAgICB0aGlzLnNpZ25IZXJvR29vZC5hbmNob3Iuc2V0KCAwLjUgKVxyXG4gICAgdGhpcy5zaWduSGVyb0dvb2QuYW5pbWF0aW9uU3BlZWQgPSAwIFxyXG4gICAgdGhpcy5zaWduSGVyb0dvb2QubG9vcCA9IGZhbHNlICAgICBcclxuXHJcbiAgICB0aGlzLnNpZ25FbmVteUdvb2QgPSBuZXcgUElYSS5leHRyYXMuQW5pbWF0ZWRTcHJpdGUoIGdvb2RTaWduRnJhbWUgKVxyXG4gICAgdGhpcy5zaWduRW5lbXlHb29kLnggPSBwb3NYRW5lbXlcclxuICAgIHRoaXMuc2lnbkVuZW15R29vZC55ID0gcG9zWUVuZW15XHJcbiAgICB0aGlzLnNpZ25FbmVteUdvb2QuYW5jaG9yLnNldCggMC41IClcclxuICAgIHRoaXMuc2lnbkVuZW15R29vZC5zY2FsZS5zZXQoIHRoaXMuc2NhbGUsIHRoaXMuc2NhbGUgKVxyXG4gICAgdGhpcy5zaWduRW5lbXlHb29kLnJvdGF0aW9uID0gTWF0aC5QSSAgICAgXHJcbiAgICB0aGlzLnNpZ25FbmVteUdvb2QuYW5pbWF0aW9uU3BlZWQgPSAwXHJcbiAgICB0aGlzLnNpZ25FbmVteUdvb2QubG9vcCA9IGZhbHNlICAgXHJcblxyXG4gICAgbGV0IGJhZFNpZ25GcmFtZSA9IFtdICBcclxuICAgIGJhZFNpZ25GcmFtZS5wdXNoKCBQSVhJLlRleHR1cmUuZnJvbUZyYW1lKCAnc2lnbjAyLnBuZycgKSApIFxyXG4gICAgYmFkU2lnbkZyYW1lLnB1c2goIFBJWEkuVGV4dHVyZS5mcm9tRnJhbWUoICdzaWduMDMucG5nJyApICkgICAgIFxyXG4gICAgYmFkU2lnbkZyYW1lLnB1c2goIFBJWEkuVGV4dHVyZS5mcm9tRnJhbWUoICdzaWduMDQucG5nJyApICkgXHJcbiAgICBiYWRTaWduRnJhbWUucHVzaCggUElYSS5UZXh0dXJlLmZyb21GcmFtZSggJ3NpZ24wOS5wbmcnICkgKVxyXG4gICAgYmFkU2lnbkZyYW1lLnB1c2goIFBJWEkuVGV4dHVyZS5mcm9tRnJhbWUoICdzaWduMTAucG5nJyApICkgICAgICAgXHJcbiAgICBiYWRTaWduRnJhbWUucHVzaCggUElYSS5UZXh0dXJlLmZyb21GcmFtZSggJ3NpZ24xMS5wbmcnICkgKSAgXHJcbiAgICBiYWRTaWduRnJhbWUucHVzaCggUElYSS5UZXh0dXJlLmZyb21GcmFtZSggJ3NpZ24xMi5wbmcnICkgKSBcclxuXHJcbiAgICB0aGlzLnNpZ25IZXJvQmFkID0gbmV3IFBJWEkuZXh0cmFzLkFuaW1hdGVkU3ByaXRlKCBiYWRTaWduRnJhbWUgKVxyXG4gICAgdGhpcy5zaWduSGVyb0JhZC54ID0gcG9zWEhlcm9cclxuICAgIHRoaXMuc2lnbkhlcm9CYWQueSA9IHBvc1lIZXJvXHJcbiAgICB0aGlzLnNpZ25IZXJvQmFkLnNjYWxlLnNldCggdGhpcy5zY2FsZSwgdGhpcy5zY2FsZSApXHJcbiAgICB0aGlzLnNpZ25IZXJvQmFkLmFuY2hvci5zZXQoIDAuNSApXHJcbiAgICB0aGlzLnNpZ25IZXJvQmFkLmFuaW1hdGlvblNwZWVkID0gMCBcclxuICAgIHRoaXMuc2lnbkhlcm9CYWQubG9vcCA9IGZhbHNlICAgICBcclxuXHJcbiAgICB0aGlzLnNpZ25FbmVteUJhZCA9IG5ldyBQSVhJLmV4dHJhcy5BbmltYXRlZFNwcml0ZSggYmFkU2lnbkZyYW1lIClcclxuICAgIHRoaXMuc2lnbkVuZW15QmFkLnggPSBwb3NYRW5lbXlcclxuICAgIHRoaXMuc2lnbkVuZW15QmFkLnkgPSBwb3NZRW5lbXlcclxuICAgIHRoaXMuc2lnbkVuZW15QmFkLnNjYWxlLnNldCggdGhpcy5zY2FsZSwgdGhpcy5zY2FsZSApXHJcbiAgICB0aGlzLnNpZ25FbmVteUJhZC5hbmNob3Iuc2V0KCAwLjUgKVxyXG4gICAgdGhpcy5zaWduRW5lbXlCYWQucm90YXRpb24gPSBNYXRoLlBJICAgICBcclxuICAgIHRoaXMuc2lnbkVuZW15QmFkLmFuaW1hdGlvblNwZWVkID0gMFxyXG4gICAgdGhpcy5zaWduRW5lbXlCYWQubG9vcCA9IGZhbHNlICAgICAgIFxyXG5cclxuXHJcbiAgICAvKiogQU5JTUFUSU9OIEZBVEFMSVRZICovXHJcblxyXG4gICAgbGV0IGZyYW1lc0ZhdGFsaXR5ID0gW11cclxuICAgIGZvciAoIGxldCBpID0gMDsgaSA8IDg7IGkgKysgKSB7XHJcbiAgICAgIGxldCB2YWwgPSBpIDwgMTAgPyAnMCcgKyBpIDogaVxyXG4gICAgICBmcmFtZXNGYXRhbGl0eS5wdXNoKCBQSVhJLlRleHR1cmUuZnJvbUZyYW1lKCAnZmF0MDFfJyArIHZhbCArICcucG5nJyApIClcclxuICAgIH1cclxuICAgIHRoaXMuZmF0YWxpdHkgPSBuZXcgUElYSS5leHRyYXMuQW5pbWF0ZWRTcHJpdGUoIGZyYW1lc0ZhdGFsaXR5IClcclxuICAgIHRoaXMuZmF0YWxpdHkueCA9IHRoaXMuc3RlcCo1XHJcbiAgICB0aGlzLmZhdGFsaXR5LnkgPSB0aGlzLnN0ZXAqMTBcclxuICAgIHRoaXMuZmF0YWxpdHkuc2NhbGUuc2V0KCB0aGlzLnNjYWxlLCB0aGlzLnNjYWxlIClcclxuICAgIHRoaXMuZmF0YWxpdHkuYW5jaG9yLnNldCggMC41IClcclxuICAgIHRoaXMuZmF0YWxpdHkuYW5pbWF0aW9uU3BlZWQgPSAwLjA1XHJcbiAgICB0aGlzLmZhdGFsaXR5Lmxvb3AgPSBmYWxzZSAgIFxyXG4gICAgXHJcbiAgICB0aGlzLnJlY2tvbldpbmRvd1NpemUoKVxyXG5cclxuICAgIG9uSW5pdCgpXHJcbiAgfVxyXG5cclxuICByZWNrb25XaW5kb3dTaXplKCkge1xyXG4gICAgbGV0IGwgPSB3aW5kb3cuaW5uZXJIZWlnaHQqMC42IFxyXG4gICAgbGV0IGggPSB3aW5kb3cuaW5uZXJIZWlnaHQgXHJcbiAgICByZW5kZXJlci52aWV3LnN0eWxlLmhlaWdodCA9IGwgXHJcbiAgICByZW5kZXJlci52aWV3LnN0eWxlLndpZHRoID0gaCBcclxuICAgIHJlbmRlcmVyLnJlc2l6ZSggbCwgaCApICBcclxuXHJcbiAgICB0aGlzLnN0ZXAgPSBoLzIwXHJcbiAgICB0aGlzLnNjYWxlID0gaC8xMDAwKjAuOTJcclxuXHJcbiAgICBpZiAoICEgdGhpcy53YWl0SGVybyApIHJldHVybiAgXHJcblxyXG4gICAgbGV0IHBvc1hIZXJvID0gdGhpcy5zdGVwKjYgXHJcbiAgICBsZXQgcG9zWUhlcm8gPSB0aGlzLnN0ZXAqMTFcclxuICAgIGxldCBwb3NYRW5lbXkgPSB0aGlzLnN0ZXAqNVxyXG4gICAgbGV0IHBvc1lFbmVteSA9IHRoaXMuc3RlcCo3IFxyXG5cclxuICAgIHNldFNwcml0ZVhZU2NhbGUoIHRoaXMud2FpdEhlcm8sIHBvc1hIZXJvLCBwb3NZSGVybywgdGhpcy5zY2FsZSApXHJcbiAgICBzZXRTcHJpdGVYWVNjYWxlKCB0aGlzLndhaXRFbmVteSwgcG9zWEVuZW15LCBwb3NZRW5lbXksIHRoaXMuc2NhbGUgKSAgXHJcbiAgICBzZXRTcHJpdGVYWVNjYWxlKCB0aGlzLmNvbWFIZXJvLCBwb3NYSGVybywgcG9zWUhlcm8sIHRoaXMuc2NhbGUgKVxyXG4gICAgc2V0U3ByaXRlWFlTY2FsZSggdGhpcy5jb21hRW5lbXksIHBvc1hFbmVteSwgcG9zWUVuZW15LCB0aGlzLnNjYWxlIClcclxuICAgIHNldFNwcml0ZVhZU2NhbGUoIHRoaXMua3VsYWtIZXJvLCBwb3NYSGVybywgcG9zWUhlcm8sIHRoaXMuc2NhbGUgKVxyXG4gICAgc2V0U3ByaXRlWFlTY2FsZSggdGhpcy5rdWxha0VuZW15LCBwb3NYRW5lbXksIHBvc1lFbmVteSwgdGhpcy5zY2FsZSApIFxyXG4gICAgc2V0U3ByaXRlWFlTY2FsZSggdGhpcy5zdG9uZUhlcm8sIHBvc1hIZXJvLCBwb3NZSGVybywgdGhpcy5zY2FsZSApXHJcbiAgICBzZXRTcHJpdGVYWVNjYWxlKCB0aGlzLnN0b25lRW5lbXkgLCBwb3NYRW5lbXksIHBvc1lFbmVteSwgdGhpcy5zY2FsZSApIFxyXG4gICAgc2V0U3ByaXRlWFlTY2FsZSggdGhpcy5zY2lzc29yc0hlcm8sIHBvc1hIZXJvLCBwb3NZSGVybywgdGhpcy5zY2FsZSApXHJcbiAgICBzZXRTcHJpdGVYWVNjYWxlKCB0aGlzLnNjaXNzb3JzRW5lbXksIHBvc1hFbmVteSwgcG9zWUVuZW15LCB0aGlzLnNjYWxlICkgICAgXHJcbiAgICBzZXRTcHJpdGVYWVNjYWxlKCB0aGlzLnBhcGVySGVybywgcG9zWEhlcm8sIHBvc1lIZXJvLCB0aGlzLnNjYWxlIClcclxuICAgIHNldFNwcml0ZVhZU2NhbGUoIHRoaXMucGFwZXJFbmVteSwgcG9zWEVuZW15LCBwb3NZRW5lbXksIHRoaXMuc2NhbGUgKSBcclxuICAgIHNldFNwcml0ZVhZU2NhbGUoIHRoaXMuc2lnbkhlcm9Hb29kLCBwb3NYSGVybywgcG9zWUhlcm8sIHRoaXMuc2NhbGUgKVxyXG4gICAgc2V0U3ByaXRlWFlTY2FsZSggdGhpcy5zaWduRW5lbXlHb29kLCBwb3NYRW5lbXksIHBvc1lFbmVteSwgdGhpcy5zY2FsZSApICAgICAgICAgXHJcbiAgICBzZXRTcHJpdGVYWVNjYWxlKCB0aGlzLnNpZ25IZXJvQmFkLCBwb3NYSGVybywgcG9zWUhlcm8sIHRoaXMuc2NhbGUgKVxyXG4gICAgc2V0U3ByaXRlWFlTY2FsZSggdGhpcy5zaWduRW5lbXlCYWQsIHBvc1hFbmVteSwgcG9zWUVuZW15LCB0aGlzLnNjYWxlICkgIFxyXG4gICAgXHJcbiAgICBzZXRTcHJpdGVYWVNjYWxlKCB0aGlzLmZhdGFsaXR5LCB0aGlzLnN0ZXAqNSwgdGhpcy5zdGVwKjEwLCB0aGlzLnNjYWxlICkgICAgICAgIFxyXG4gICAgXHJcbiAgfSAgXHJcblxyXG5cclxuICAvKiogRlVOQ1RJT05TIFBSRVBFQVIgR0FNRSAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG4gIHNldFN0YXJ0U2lnbigpIHtcclxuICAgXHJcbiAgICB0aGlzLnNpZ25IZXJvR29vZC5nb3RvQW5kU3RvcCgwKVxyXG4gICAgdGhpcy5zaWduSGVyb0dvb2QueCA9IHRoaXMuc3RlcCo2XHJcbiAgICB0aGlzLnNpZ25IZXJvR29vZC55ID0gdGhpcy5zdGVwKjExXHJcbiAgICB0aGlzLnNpZ25IZXJvR29vZC5zY2FsZS5zZXQoIHRoaXMuc2NhbGUsIHRoaXMuc2NhbGUgKVxyXG4gICAgdGhpcy5zdGFnZS5hZGRDaGlsZCggdGhpcy5zaWduSGVyb0dvb2QgKVxyXG4gIH1cclxuXHJcblxyXG4gIHJlbW92ZVN0YXJ0U2lnbigpIHtcclxuICBcclxuICAgIHRoaXMuc3RhZ2UucmVtb3ZlQ2hpbGQoIHRoaXMuc2lnbkhlcm9Hb29kICkgICBcclxuICB9XHJcblxyXG5cclxuICBzdGFydEFuaW1hdGlvbldhaXQoIGhlcm8sIGVuZW15ICkge1xyXG5cclxuICAgIGlmICggaGVybyApIHtcclxuICAgICAgdGhpcy53YWl0SGVyby5wbGF5KClcclxuICAgICAgdGhpcy5zdGFnZS5hZGRDaGlsZCggdGhpcy53YWl0SGVybyApXHJcbiAgICB9XHJcbiAgICBcclxuICAgIGlmICggZW5lbXkgKSB7XHJcbiAgICAgIHRoaXMud2FpdEVuZW15LnBsYXkoKVxyXG4gICAgICB0aGlzLnN0YWdlLmFkZENoaWxkKCB0aGlzLndhaXRFbmVteSApICAgICAgXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuXHJcbiAgcmVtb3ZlQW5pbWF0aW9uV2FpdCggaGVybywgZW5lbXkgKSB7XHJcbiAgICBcclxuICAgIGlmICggaGVybyApIHtcclxuICAgICAgdGhpcy53YWl0SGVyby5zdG9wKClcclxuICAgICAgdGhpcy5zdGFnZS5yZW1vdmVDaGlsZCggdGhpcy53YWl0SGVybyApXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCBlbmVteSApIHtcclxuICAgICAgdGhpcy53YWl0RW5lbXkuc3RvcCgpXHJcbiAgICAgIHRoaXMuc3RhZ2UucmVtb3ZlQ2hpbGQoIHRoaXMud2FpdEVuZW15ICkgICAgXHJcbiAgICB9XHJcbiAgfSAgXHJcblxyXG5cclxuICBwcmVwZWFyQ2FudmFzVG9GaWdodCggY2FudmFzUmVhZHkgKSB7XHJcblxyXG4gICAgdGhpcy5hZGRHb29kU2lnbiggdHJ1ZSwgdHJ1ZSApXHJcbiAgICBzZXRUaW1lb3V0KCAoKSA9PiB7IFxyXG4gICAgICAgIHRoaXMuY2FudmFzUmVhZHlUb0ZpZ2h0KCBjYW52YXNSZWFkeSApIFxyXG4gICAgICB9LCAxNTAwIClcclxuICB9ICBcclxuXHJcblxyXG4gIGNhbnZhc1JlYWR5VG9GaWdodCggY2FudmFzUmVhZHkgKSB7XHJcblxyXG4gICAgdGhpcy5yZW1vdmVHb29kU2lnbiggdHJ1ZSwgdHJ1ZSApICBcclxuICAgIGNhbnZhc1JlYWR5KClcclxuICB9XHJcblxyXG5cclxuICBhZGRHb29kU2lnbiggaGVybywgZW5lbXkgKSB7XHJcblxyXG4gICAgaWYgKCBoZXJvICkge1xyXG4gICAgICB0aGlzLnNpZ25IZXJvR29vZC5nb3RvQW5kU3RvcCggTWF0aC5mbG9vciggTWF0aC5yYW5kb20oKSo0ICsgMSApICkgIFxyXG4gICAgICB0aGlzLnNpZ25IZXJvR29vZC54ID0gdGhpcy5zdGVwKjYgIFxyXG4gICAgICB0aGlzLnNpZ25IZXJvR29vZC55ID0gdGhpcy5zdGVwKjExXHJcbiAgICAgIHRoaXMuc2lnbkhlcm9Hb29kLnNjYWxlLnNldCggdGhpcy5zY2FsZSwgdGhpcy5zY2FsZSApICAgICAgICAgXHJcbiAgICAgIHRoaXMuc3RhZ2UuYWRkQ2hpbGQoIHRoaXMuc2lnbkhlcm9Hb29kIClcclxuICAgIH1cclxuICAgIGlmICggZW5lbXkgKSB7XHJcbiAgICAgIHRoaXMuc2lnbkVuZW15R29vZC5nb3RvQW5kU3RvcCggTWF0aC5mbG9vciggTWF0aC5yYW5kb20oKSo0ICsgMSApICkgICAgICBcclxuICAgICAgdGhpcy5zdGFnZS5hZGRDaGlsZCggdGhpcy5zaWduRW5lbXlHb29kICkgICAgICBcclxuICAgIH1cclxuICB9XHJcblxyXG5cclxuICByZW1vdmVHb29kU2lnbiggaGVybywgZW5lbXkgKSB7XHJcblxyXG4gICAgaWYgKCBoZXJvICkge1xyXG4gICAgICB0aGlzLnN0YWdlLnJlbW92ZUNoaWxkKCB0aGlzLnNpZ25IZXJvR29vZCApXHJcbiAgICB9XHJcbiAgICBpZiAoIGVuZW15ICkge1xyXG4gICAgICB0aGlzLnN0YWdlLnJlbW92ZUNoaWxkKCB0aGlzLnNpZ25FbmVteUdvb2QgKSAgICAgIFxyXG4gICAgfVxyXG4gIH1cclxuXHJcblxyXG4gIGFkZEJhZFNpZ24oIGhlcm8sIGVuZW15ICkge1xyXG5cclxuICAgIGlmICggaGVybyApIHtcclxuICAgICAgdGhpcy5zaWduSGVyb0JhZC5nb3RvQW5kU3RvcCggTWF0aC5mbG9vciggTWF0aC5yYW5kb20oKSo3ICkgKSAgICAgIFxyXG4gICAgICB0aGlzLnN0YWdlLmFkZENoaWxkKCB0aGlzLnNpZ25IZXJvQmFkIClcclxuICAgIH1cclxuICAgIGlmICggZW5lbXkgKSB7XHJcbiAgICAgIHRoaXMuc2lnbkVuZW15QmFkLmdvdG9BbmRTdG9wKCBNYXRoLmZsb29yKCBNYXRoLnJhbmRvbSgpKjcgKSApICAgICAgXHJcbiAgICAgIHRoaXMuc3RhZ2UuYWRkQ2hpbGQoIHRoaXMuc2lnbkVuZW15QmFkICkgICAgICBcclxuICAgIH1cclxuICB9XHJcblxyXG5cclxuICByZW1vdmVCYWRTaWduKCBoZXJvLCBlbmVteSApIHtcclxuXHJcbiAgICBpZiAoIGhlcm8gKSB7XHJcbiAgICAgIHRoaXMuc3RhZ2UucmVtb3ZlQ2hpbGQoIHRoaXMuc2lnbkhlcm9CYWQgKVxyXG4gICAgfVxyXG4gICAgaWYgKCBlbmVteSApIHtcclxuICAgICAgdGhpcy5zdGFnZS5yZW1vdmVDaGlsZCggdGhpcy5zaWduRW5lbXlCYWQgKSAgICAgIFxyXG4gICAgfVxyXG4gIH0gIFxyXG5cclxuXHJcblxyXG4gIC8qKiBGVU5DVElPTlMgUk9VTkQgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbiAgc3RhcnRBbmltYXRpb25LdWxhayggaGVybywgZW5lbXkgKSB7XHJcbiAgXHJcbiAgICBpZiAoIGhlcm8gKSB7XHJcbiAgICAgIHRoaXMua3VsYWtIZXJvLnBsYXkoKVxyXG4gICAgICB0aGlzLnN0YWdlLmFkZENoaWxkKCB0aGlzLmt1bGFrSGVybyApICAgIFxyXG4gICAgfVxyXG4gICAgaWYgKCBlbmVteSApIHtcclxuICAgICAgdGhpcy5rdWxha0VuZW15LnBsYXkoKVxyXG4gICAgICB0aGlzLnN0YWdlLmFkZENoaWxkKCB0aGlzLmt1bGFrRW5lbXkgKSAgICBcclxuICAgIH0gICAgXHJcbiAgfSBcclxuXHJcblxyXG4gIHN0b3BBbmltYXRpb25LdWxhayggaGVybywgZW5lbXkgKSB7XHJcbiAgXHJcbiAgICBpZiAoIGhlcm8gKSB7XHJcbiAgICAgIHRoaXMua3VsYWtIZXJvLmdvdG9BbmRTdG9wKCA1ICkgICAgXHJcbiAgICB9XHJcbiAgICBpZiAoIGVuZW15ICkge1xyXG4gICAgICB0aGlzLmt1bGFrRW5lbXkuZ290b0FuZFN0b3AoIDUgKSAgICAgXHJcbiAgICB9ICAgIFxyXG4gIH1cclxuXHJcblxyXG4gIHJlbW92ZUFuaW1hdGlvbkt1bGFrKCBoZXJvLCBlbmVteSApIHtcclxuICBcclxuICAgIGlmICggaGVybyApIHtcclxuICAgICAgdGhpcy5zdGFnZS5yZW1vdmVDaGlsZCggdGhpcy5rdWxha0hlcm8gKSAgXHJcbiAgICB9XHJcbiAgICBpZiAoIGVuZW15ICkge1xyXG4gICAgICB0aGlzLnN0YWdlLnJlbW92ZUNoaWxkKCB0aGlzLmt1bGFrRW5lbXkgKVxyXG4gICAgfSAgICBcclxuICB9XHJcbiAgXHJcbiAgXHJcbiAgZHJhd1BsYXllcnNDaG9pY2VzKCBjaG9pY2VzICkge1xyXG4gICAgXHJcbiAgICB0aGlzLnJlbW92ZUFuaW1hdGlvbkt1bGFrKCB0cnVlLCB0cnVlIClcclxuICAgIFxyXG4gICAgdGhpcy5jdXJyZW50U3ByaXRlSGVybyA9IHRoaXMuZ2V0U3ByaXRlKCB0cnVlLCBmYWxzZSwgY2hvaWNlcy5teUNob2ljZSApXHJcbiAgICB0aGlzLnN0YWdlLmFkZENoaWxkKCB0aGlzLmN1cnJlbnRTcHJpdGVIZXJvICkgICAgXHJcbiAgICBpZiAoIHRoaXMuaXNTcHJpdGVQbGF5KCBjaG9pY2VzLm15Q2hvaWNlICkgKSB7IFxyXG4gICAgICB0aGlzLmN1cnJlbnRTcHJpdGVIZXJvLnBsYXkoKVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5jdXJyZW50U3ByaXRlSGVyby5nb3RvQW5kU3RvcCgxKSAgICAgIFxyXG4gICAgfSBcclxuICAgIFxyXG4gICAgdGhpcy5jdXJyZW50U3ByaXRlRW5lbXkgPSB0aGlzLmdldFNwcml0ZSggZmFsc2UsIHRydWUsIGNob2ljZXMuZW5lbXlDaG9pY2UgKVxyXG4gICAgdGhpcy5zdGFnZS5hZGRDaGlsZCggdGhpcy5jdXJyZW50U3ByaXRlRW5lbXkgKSBcclxuICAgIGlmICggdGhpcy5pc1Nwcml0ZVBsYXkoIGNob2ljZXMuZW5lbXlDaG9pY2UgKSApIHsgXHJcbiAgICAgIHRoaXMuY3VycmVudFNwcml0ZUVuZW15LnBsYXkoKVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5jdXJyZW50U3ByaXRlRW5lbXkuZ290b0FuZFN0b3AoMSkgICAgICBcclxuICAgIH0gICAgICAgICAgIFxyXG4gIH1cclxuXHJcblxyXG4gIGdldFNwcml0ZSggaGVybywgZW5lbXksIGNob2ljZSApIHtcclxuICBcclxuICAgIGxldCBzcCA9IG51bGxcclxuICBcclxuICAgIGlmICggaGVybyApIHtcclxuICAgICAgaWYgKCBjaG9pY2UgPT0gJ3N0b25lJyApIHNwID0gdGhpcy5zdG9uZUhlcm8gXHJcbiAgICAgIGlmICggY2hvaWNlID09ICdwYXBlcicgKSBzcCA9IHRoaXMucGFwZXJIZXJvIFxyXG4gICAgICBpZiAoIGNob2ljZSA9PSAnc2Npc3NvcnMnICkgc3AgPSB0aGlzLnNjaXNzb3JzSGVybyBcclxuICAgICAgaWYgKCBjaG9pY2UgPT0gJ3RpbWVvdXQnICkgc3AgPSB0aGlzLnNpZ25IZXJvQmFkIFxyXG4gICAgfVxyXG4gICAgaWYgKCBlbmVteSApIHtcclxuICAgICAgaWYgKCBjaG9pY2UgPT0gJ3N0b25lJyApIHNwID0gdGhpcy5zdG9uZUVuZW15XHJcbiAgICAgIGlmICggY2hvaWNlID09ICdwYXBlcicgKSBzcCA9IHRoaXMucGFwZXJFbmVteSBcclxuICAgICAgaWYgKCBjaG9pY2UgPT0gJ3NjaXNzb3JzJyApIHNwID0gdGhpcy5zY2lzc29yc0VuZW15IFxyXG4gICAgICBpZiAoIGNob2ljZSA9PSAndGltZW91dCcgKSBzcCA9IHRoaXMuc2lnbkVuZW15QmFkIFxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBzcFxyXG4gIH1cclxuXHJcblxyXG4gIGlzU3ByaXRlUGxheSggY2hvaWNlICkge1xyXG5cclxuICAgIGlmICggY2hvaWNlID09ICd0aW1lb3V0JyApIHtcclxuICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZVxyXG4gIH1cclxuXHJcblxyXG4gIHJlbW92ZVBsYXllcnNDaG9pY2VzKCkge1xyXG5cclxuICAgIHRoaXMuc3RhZ2UucmVtb3ZlQ2hpbGQoIHRoaXMuY3VycmVudFNwcml0ZUhlcm8gKVxyXG4gICAgdGhpcy5zdGFnZS5yZW1vdmVDaGlsZCggdGhpcy5jdXJyZW50U3ByaXRlRW5lbXkgKSAgICBcclxuICB9XHJcblxyXG5cclxuICAvKiogRlVOQ1RJT05TIEZBVEFMSVRZICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovICBcclxuXHJcbiAgc3RhcnRBbmltYXRpb25Db21hKCBoZXJvLCBlbmVteSApIHtcclxuXHJcbiAgICBpZiAoIGhlcm8gKSB7XHJcbiAgICAgIHRoaXMuY29tYUhlcm8ucGxheSgpXHJcbiAgICAgIHRoaXMuc3RhZ2UuYWRkQ2hpbGQoIHRoaXMuY29tYUhlcm8gKVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBpZiAoIGVuZW15ICkge1xyXG4gICAgICB0aGlzLmNvbWFFbmVteS5wbGF5KClcclxuICAgICAgdGhpcy5zdGFnZS5hZGRDaGlsZCggdGhpcy5jb21hRW5lbXkgKSAgICAgIFxyXG4gICAgfVxyXG4gIH1cclxuXHJcblxyXG4gIHN0b3BBbmltYXRpb25Db21hKCBoZXJvLCBlbmVteSApIHtcclxuICAgIFxyXG4gICAgaWYgKCBoZXJvICkge1xyXG4gICAgICB0aGlzLmNvbWFIZXJvLnN0b3AoKVxyXG4gICAgICB0aGlzLnN0YWdlLnJlbW92ZUNoaWxkKCB0aGlzLmNvbWFIZXJvIClcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIGVuZW15ICkge1xyXG4gICAgICB0aGlzLmNvbWFFbmVteS5zdG9wKClcclxuICAgICAgdGhpcy5zdGFnZS5yZW1vdmVDaGlsZCggdGhpcy5jb21hRW5lbXkgKSAgICBcclxuICAgIH1cclxuICB9XHJcblxyXG5cclxuICBzdGFydEFuaW1hdGlvbkZhdGFsaXR5KCBub1JvdGF0aW9uICkge1xyXG5cclxuICAgIG5vUm90YXRpb24gPyB0aGlzLmZhdGFsaXR5LnJvdGF0aW9uID0gMCAgOiB0aGlzLmZhdGFsaXR5LnJvdGF0aW9uID0gTWF0aC5QSVxyXG4gICAgdGhpcy5zdGFnZS5hZGRDaGlsZCggdGhpcy5mYXRhbGl0eSApIFxyXG4gICAgdGhpcy5mYXRhbGl0eS5nb3RvQW5kUGxheSggMCApXHJcbiAgfVxyXG5cclxuXHJcbiAgcmVtb3ZlQW5pbWF0aW9uRmF0YWxpdHkoKSB7XHJcblxyXG4gICAgdGhpcy5zdGFnZS5yZW1vdmVDaGlsZCggdGhpcy5mYXRhbGl0eSApICAgICBcclxuICB9IFxyXG5cclxuXHJcbiAgLyoqIERSQVcgRVZFUlkgRlJBTUUgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG4gIGRyYXdGcmFtZSgpIHsgXHJcblxyXG4gICAgcmVuZGVyZXIucmVuZGVyKCB0aGlzLnN0YWdlIClcclxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7IFxyXG4gICAgICB0aGlzLmRyYXdGcmFtZSgpIFxyXG4gICAgfSlcclxuICB9XHJcbn0gIFxyXG5cclxuXHJcbmNvbnN0IHNldFNwcml0ZVhZU2NhbGUgPSAoIG9iLCB4LCB5LCBzYyApID0+IHtcclxuICBvYi54ID0geFxyXG4gIG9iLnkgPSB5XHJcbiAgb2Iuc2NhbGUuc2V0KCBzYywgc2MgKSBcclxufVxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEN0eFxyXG5cclxuXHJcbiIsIlxyXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKjtcclxuICogICAgICAgICAgICAgIF8gICAgICAgICogIFByb2plY3QgICAgICAgIDogIFNUT05FICAgIFxyXG4gKiAgICAgICAgX19fX18vXFxfXFwgICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tO1xyXG4gKiAgICAgICAvXFwgICAvIC8gLyAgICAgICogIFByb2dyYW0gbmFtZSAgIDogIG1haW5cclxuICogICAgX18vXyBcXCAgXFwvXy8gXFwgICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS07XHJcbiAqICAgL1xcX19fXFwgXFxfX19fX19fXFwgICAgKiAgQXV0aG9yICAgICAgICAgOiAgd3d3Lm90cmlzb3Zhbm8ucnVcclxuICogICBcXC9fX18vIC8gIF9fICAgLyAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tO1xyXG4gKiAgICAgIFxcICAvICAvXFwgXFwgLyAgICAgKiAgRGF0ZSAgICAgICAgICAgOiAgMDEuMTEuMjAxNyBcclxuICogICAgICAgXFwvX19fXFwgXFxfXFwgICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tO1xyXG4gKiAgICAgICAgICAgICBcXC9fLyAgICAgICogIFB1cnBvc2UgICAgICAgIDogIGdhbWUgMmRcclxuICogICAgICAgICAgICAgICAgICAgICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS07XHJcbiAqICAgICAgICAgICAgICAgICAgICAgICAqICBMaWNlbnNlICAgICAgICA6ICBNSVQgICAgICAgICBcclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG5cclxuJ3VzZSBzdHJpY3QnIFxyXG5cclxuXHJcbi8qKiBJTVBPUlQgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLyBcclxuXHJcblxyXG5pbXBvcnQgVWkgZnJvbSAnLi9VaScgXHJcbmltcG9ydCBDbGllbnQgZnJvbSAnLi9DbGllbnQnXHJcbmltcG9ydCBDdHggZnJvbSAnLi9DdHgnXHJcblxyXG5jb25zdCB1aSAgICAgPSBuZXcgVWkoKVxyXG5jb25zdCBjbGllbnQgPSBuZXcgQ2xpZW50KClcclxuY29uc3QgY3R4ICAgID0gbmV3IEN0eCgpXHJcblxyXG5cclxuLyoqIEdBTUUgVkFSUyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG5cclxubGV0IGludGVydmFsTGlzdGVuQ2hvaWNlRW5lbXkgPSBudWxsLFxyXG50aW1lclJvdW5kICAgICAgICAgICAgICAgICAgICA9IG51bGwsXHJcbnRpbWVyVXBkYXRlR2FtZVJlc3VsdCAgICAgICAgID0gbnVsbCxcclxudGltZXJFbmRGYXRhbGl0eSAgICAgICAgICAgICAgPSBudWxsLFxyXG5nYW1lU3RhdHVzICAgICAgICAgICAgICAgICAgICA9ICdub25lJywgLy8gcGxheSB8IG1hZGUtY2hvaWNlLWFuZC13YWl0IHwgd2FpdC1jaG9pY2UtZmF0YWxpdHkgfCBmYXRhbGl0eVxyXG5yYW5kb21GYXRhbGl0eUhhc2ggICAgICAgICAgICA9IG51bGwsXHJcblxyXG5nb291dEJyb3dzZXJUaW1lICAgICAgICAgICAgICA9IG51bGwgICAgICAgXHJcblxyXG4vKiogSU5JVCBHQU1FICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcblxyXG5jb25zdCBpbml0ID0gKCkgPT4ge1xyXG5cclxuICByZXR1cm4gbmV3IFByb21pc2UoKCByZXNvbHZlICkgPT4ge1xyXG4gICAgICBjdHgubG9hZEFzc2V0cyggcmVzb2x2ZSApXHJcbiAgfSlcclxuICAudGhlbigoKSA9PiB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKCByZXNvbHZlICkgPT4geyBcclxuICAgICAgdWkuaW5pdCgpICAgIFxyXG4gICAgICBjdHguZHJhd0ZyYW1lKClcclxuICAgICAgY3R4LnNldFN0YXJ0U2lnbigpIFxyXG4gICAgICBpbml0QnV0dG9uU2VhcmNoRW5lbXkoKSAgICAgICAgIFxyXG4gICAgICBpbml0QnV0dG9uc0Nob2ljZUhlcm8oKVxyXG4gICAgICBpbml0RXJyb3JDb25uZWN0aW9uKClcclxuICAgICAgaW5pdEdvb3V0QnJvd3NlclRhYkVycm9yKCkgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgcmVzb2x2ZSgpXHJcbiAgICB9KVxyXG4gIH0pXHJcbiAgLnRoZW4oKCkgPT4ge1xyXG4gICAgaWYgKCByZW1vdmVTdGFydExvYWRlciApIHJlbW92ZVN0YXJ0TG9hZGVyKClcclxuICAgIGluaXRTdGFydEJ1dHRvbigpXHJcbiAgICBjb25uZWN0Rmlyc3QoKVxyXG4gIH0pXHJcbn1cclxuICBcclxuXHJcbmNvbnN0IGluaXRFcnJvckNvbm5lY3Rpb24gPSAoKSA9PiB7XHJcblxyXG4gIGNsaWVudC5zZXRGdW5jdGlvblJlc3BvbnNlRXJyb3IoICgpID0+IHtcclxuICAgIHVpLnNldE1lc3NhZ2UoICdHQU1FIERJU0NPTk5FQ1RFRCcgKVxyXG4gICAgY2xlYXJFcnJvclNjcmVlbigpXHJcbiAgfSlcclxufVxyXG5cclxuXHJcbmNvbnN0IGluaXRHb291dEJyb3dzZXJUYWJFcnJvciA9ICgpID0+IHtcclxuICBcclxuICB3aW5kb3cub25ibHVyID0gKCkgPT4ge1xyXG4gICAgaWYgKCBnYW1lU3RhdHVzICE9ICdwbGF5JyB8fCBnYW1lU3RhdHVzICE9ICdtYWRlLWNob2ljZS1hbmQtd2FpdCcgKSByZXR1cm5cclxuICAgIGdvb3V0QnJvd3NlclRpbWUgPSBuZXcgRGF0ZSgpXHJcbiAgfVxyXG4gIHdpbmRvdy5vbmZvY3VzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKCBnb291dEJyb3dzZXJUaW1lID09IG51bGwgKSByZXR1cm5cclxuICAgIGlmICggbmV3IERhdGUoKSAtIGdvb3V0QnJvd3NlclRpbWUgPiAyMDAwMDAgKSB7XHJcbiAgICAgIGdvb3V0QnJvd3NlclRpbWUgPSBudWxsXHJcbiAgICAgIGNsZWFyRXJyb3JTY3JlZW4oKVxyXG4gICAgICBjdHguc2V0U3RhcnRTaWduKCkgXHJcbiAgICAgIHVpLnNob3dCdXR0b25TZWFyY2goKSAgICAgIFxyXG4gICAgfSBcclxuICB9XHJcbn1cclxuXHJcblxyXG5jb25zdCBjbGVhckVycm9yU2NyZWVuID0gKCkgPT4ge1xyXG5cclxuICBjdHgucmVtb3ZlQmFkU2lnbiggdHJ1ZSwgdHJ1ZSApIFxyXG4gIGN0eC5yZW1vdmVHb29kU2lnbiggdHJ1ZSwgdHJ1ZSApXHJcbiAgY3R4LnJlbW92ZUFuaW1hdGlvbkt1bGFrKCB0cnVlLCB0cnVlIClcclxuICBjdHgucmVtb3ZlQW5pbWF0aW9uV2FpdCggdHJ1ZSwgdHJ1ZSApICBcclxuICBjdHgucmVtb3ZlUGxheWVyc0Nob2ljZXMoKSAgICBcclxuICBjdHgucmVtb3ZlQW5pbWF0aW9uRmF0YWxpdHkoKVxyXG4gIHVpLmhpZGVCdXR0b25zQ2hvaWNlKClcclxuICBjbGVhckFsbFRpbWVycygpICAgICAgIFxyXG4gIGVuZEJhdHRsZSgpICAgICAgXHJcbn1cclxuXHJcblxyXG5jb25zdCBpbml0U3RhcnRCdXR0b24gPSAoKSA9PiB7XHJcblxyXG4gIHVpLmluaXRTdGFydEJ1dHRvbigoKSA9PiB7IFxyXG4gICAgaWYgKCByZW1vdmVTdGFydFNjcmVlbiApIHJlbW92ZVN0YXJ0U2NyZWVuKClcclxuICAgIHVpLnNob3dCdXR0b25TZWFyY2goKSBcclxuICB9KVxyXG59IFxyXG5cclxuXHJcbmNvbnN0IGluaXRCdXR0b25TZWFyY2hFbmVteSA9ICgpID0+IHtcclxuXHJcbiAgdWkuY2xpY2tCdXR0b25TZWFyY2hFbmVteSgoKSA9PiB7XHJcbiAgICBjdHgucmVtb3ZlR29vZFNpZ24oIHRydWUsIGZhbHNlIClcclxuICAgIGN0eC5yZW1vdmVCYWRTaWduKCB0cnVlLCBmYWxzZSApICBcclxuICAgIGN0eC5yZW1vdmVBbmltYXRpb25GYXRhbGl0eSgpXHJcbiAgICBjdHgucmVtb3ZlU3RhcnRTaWduKClcclxuICAgIGN0eC5zdGFydEFuaW1hdGlvbldhaXQoIHRydWUsIGZhbHNlIClcclxuICAgIHVpLmNsZWFyU2NyZWVuKClcclxuICAgIGFwaUZpbmRFbmVteSgpXHJcbiAgfSkgICAgICAgXHJcbn0gIFxyXG4gIFxyXG4gIFxyXG4gICAgICBcclxuLyoqIFNUQVJUIEZVTkNUSU9OUyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG5cclxuY29uc3QgY29ubmVjdEZpcnN0ID0gKCkgPT4ge1xyXG4gIFxyXG4gIGNsaWVudC5nZXRTaWduSWZDb25uZWN0Rmlyc3QoKCBzZXJ2ZXJSZXN1bHQgKSA9PiB7XHJcbiAgICB1aS5zZXRDb25uZWN0aW9uTWVzc2FnZSggc2VydmVyUmVzdWx0Lm5hbWUgKVxyXG4gIH0pXHJcbn1cclxuICAgIFxyXG4gIFxyXG5jb25zdCBhcGlGaW5kRW5lbXkgPSAoKSA9PiB7XHJcblxyXG4gIGNsaWVudC5zZW5kU2lnblRvRmluZEVuZW15KCggc2VydmVyUmVzdWx0ICkgPT4ge1xyXG4gICAgaWYgKCBzZXJ2ZXJSZXN1bHQuc3RhdGUgPT09ICdwbGF5aW5nJyApIHsgXHJcbiAgICAgIGdhbWVTdGF0dXMgPSAncGxheSdcclxuICAgICAgbWVldGluZ1BsYXllcnMoKVx0XHRcdFx0XHRcclxuICAgIH0gZWxzZSB7IFxyXG4gICAgICBzZXRUaW1lb3V0KCBhcGlGaW5kRW5lbXksIDUwMCApOyBcclxuICAgIH0gICAgICBcclxuICB9KVxyXG59XHJcbiAgICBcclxuICAgIFxyXG5jb25zdCBtZWV0aW5nUGxheWVycyA9ICgpID0+IHtcclxuXHJcbiAgY2xpZW50LmdldFNpZ25BYm91dFVwZGF0ZUdhbWVSZXN1bHQoKCBzZXJ2ZXJSZXN1bHQgKSA9PiB7XHJcbiAgICB1aS5zZXRNZXNzYWdlU2VhcmNoRW5lbXkoIHNlcnZlclJlc3VsdC5lbmVteS5uYW1lIClcclxuICAgIGN0eC5yZW1vdmVBbmltYXRpb25XYWl0KCB0cnVlLCBmYWxzZSApXHJcbiAgICBjdHgucHJlcGVhckNhbnZhc1RvRmlnaHQoICgpID0+IHsgXHJcbiAgICAgIHN0YXJ0Um91bmQoKVxyXG4gICAgfSlcdCAgICBcclxuICB9KSBcclxufVxyXG5cclxuXHJcbi8qKiBGVU5DVElPTlMgUExBWSBST1VORCAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuXHJcbmNvbnN0IHN0YXJ0Um91bmQgPSAoKSA9PiB7XHJcblxyXG4gIGdhbWVTdGF0dXMgPSAncGxheSdcclxuICB1aS5oaWRlQnV0dG9uU2VhcmNoKClcclxuICB1aS5zdGFydEFuaW1hdGlvblJvdW5kVGltZXIoIDcwMDAgKVxyXG4gIHVpLnJlZHJhd0Nob2ljZUJ1dHRvbnMoICdzaG93JyApXHJcbiAgdWkuc2hvd0J1dHRvbnNDaG9pY2UoKSAgXHJcbiAgY3R4LnN0YXJ0QW5pbWF0aW9uS3VsYWsoIHRydWUsIHRydWUgKVxyXG5cclxuICBpbnRlcnZhbExpc3RlbkNob2ljZUVuZW15ID0gc2V0SW50ZXJ2YWwoIHdhaXRFbmVteUNob2ljZSwgMTAwMCApXHJcbiAgdGltZXJSb3VuZCA9IHNldFRpbWVvdXQoIGVuZFRpbWVyUm91bmQsIDcwMDAgKVx0XHRcclxufVxyXG4gICAgXHJcbiAgXHJcbmNvbnN0IHdhaXRFbmVteUNob2ljZSA9ICgpID0+IHtcclxuXHJcbiAgY2xpZW50LmdldFNpZ25BYm91dFVwZGF0ZUdhbWVSZXN1bHQoKCBzZXJ2ZXJSZXN1bHQgKSA9PiB7XHJcblxyXG4gICAgaWYgKCBzZXJ2ZXJSZXN1bHQuZW5lbXlNYWRlQ2hvaWNlICkge1x0XHJcbiAgICAgIGN0eC5zdG9wQW5pbWF0aW9uS3VsYWsoIGZhbHNlLCB0cnVlIClcclxuICAgICAgY2xlYXJJbnRlcnZhbCggaW50ZXJ2YWxMaXN0ZW5DaG9pY2VFbmVteSApXHRcdFxyXG4gICAgfVxyXG4gIH0pXHJcbn1cdFx0XHJcbiAgICBcclxuXHJcbmNvbnN0IGluaXRCdXR0b25zQ2hvaWNlSGVybyA9ICgpID0+IHtcclxuXHJcbiAgdWkuY2xpY2tCdXR0b25zQ2hvaWNlSGVybyggXHJcbiAgICAoIGUgKSA9PiB7ICAgICBcclxuICAgICAgaWYgKCBnYW1lU3RhdHVzID09PSAncGxheScgKSB7XHRcclxuICAgICAgICBnYW1lU3RhdHVzID0gJ21hZGUtY2hvaWNlLWFuZC13YWl0JyBcclxuICAgICAgICBzZW5kSGVyb0Nob2ljZSggZS50YXJnZXQudmFsdWUgKVxyXG4gICAgICAgIHJldHVybiBcclxuICAgICAgfVxyXG4gICAgICBpZiAoIGdhbWVTdGF0dXMgPT09ICd3YWl0LWNob2ljZS1mYXRhbGl0eScgKSB7XHJcbiAgICAgICAgY2hlY2tGYXRhbGl0eURvbmUoIGUudGFyZ2V0LnZhbHVlIClcclxuICAgICAgfSAgICAgICAgXHRcdFxyXG4gICAgfSwgXHJcbiAgICBpc1VwZGFkZUJ1dHRvbnNJbWdzXHJcbiAgKSAgICAgXHJcbn1cclxuXHJcbmNvbnN0IGlzVXBkYWRlQnV0dG9uc0ltZ3MgPSAoKSA9PiB7XHJcblxyXG4gIGlmICggZ2FtZVN0YXR1cyA9PT0gJ3BsYXknICkgcmV0dXJuIHRydWVcclxuICByZXR1cm4gZmFsc2VcclxufVxyXG5cclxuXHJcbmNvbnN0IHNlbmRIZXJvQ2hvaWNlID0gKCBjaG9pY2UgKSA9PiB7XHJcblxyXG4gIGN0eC5zdG9wQW5pbWF0aW9uS3VsYWsoIHRydWUsIGZhbHNlIClcclxuICBjbGllbnQuc2VuZEhlcm9DaG9pY2UoIGNob2ljZSwgKCBzZXJ2ZXJSZXN1bHQgKSA9PiB7XHJcbiAgICB1cGRhdGVHYW1lUmVzdWx0KCBzZXJ2ZXJSZXN1bHQgKVxyXG4gIH0pIFxyXG59XHQgXHJcblxyXG5cclxuY29uc3QgZW5kVGltZXJSb3VuZCA9ICgpID0+IHsgIFxyXG4gIFxyXG4gIGNsZWFySW50ZXJ2YWwoIGludGVydmFsTGlzdGVuQ2hvaWNlRW5lbXkgKVxyXG4gIGNsaWVudC5zZW5kSGVyb0Nob2ljZSggJ3RpbWVvdXQnLCAoIHNlcnZlclJlc3VsdCApID0+IHtcclxuICAgIHVwZGF0ZUdhbWVSZXN1bHQoIHNlcnZlclJlc3VsdCApXHJcbiAgfSlcclxufVxyXG5cclxuXHJcbmNvbnN0IHVwZGF0ZUdhbWVSZXN1bHQgPSAoIHNlcnZlclJlc3VsdCApID0+IHtcdCBcclxuIFxyXG4gIGlmICggc2VydmVyUmVzdWx0LnN0YXRlID09ICdvbmVPZlBsYXllcnNEaXNjb25uZWN0ZWQnICkge1xyXG4gICAgY2xlYXJBbGxUaW1lcnMoKVxyXG4gICAgZHJhd0VuZW15RGlzY29ubmVjdGlvbigpXHJcbiAgICByZXR1cm5cclxuICB9XHJcbiAgaWYgKCBzZXJ2ZXJSZXN1bHQuZW5lbXlNYWRlQ2hvaWNlICkge1x0XHJcbiAgICBjbGVhckFsbFRpbWVycygpXHJcblxyXG4gICAgdWkuZHJhd1JvdW5kUmVzdWx0KCBzZXJ2ZXJSZXN1bHQucmVzdWx0c1sgc2VydmVyUmVzdWx0LnJlc3VsdHMubGVuZ3RoLTEgXSApICAgICAgIFxyXG4gICAgY3R4LmRyYXdQbGF5ZXJzQ2hvaWNlcyggc2VydmVyUmVzdWx0LnJlc3VsdHNbIHNlcnZlclJlc3VsdC5yZXN1bHRzLmxlbmd0aC0xIF0gKVxyXG5cclxuICAgIHNldFRpbWVvdXQoIG5leHRSb3VuZCwgNDAwMCApXHJcbiAgfSBlbHNlIHtcclxuICAgIHRpbWVyVXBkYXRlR2FtZVJlc3VsdCA9IHNldFRpbWVvdXQoICgpID0+IHtcclxuICAgICAgY2xpZW50LmdldFNpZ25BYm91dFVwZGF0ZUdhbWVSZXN1bHQoKCBzZXJ2ZXJSZXN1bHQgKSA9PiB7XHJcbiAgICAgICAgdXBkYXRlR2FtZVJlc3VsdCggc2VydmVyUmVzdWx0IClcclxuICAgICAgfSkgICAgICAgICAgICBcdFx0XHRcdFxyXG4gICAgfSwgNTAwIClcclxuICB9ICBcclxufVxyXG5cclxuXHJcbmNvbnN0IGNsZWFyQWxsVGltZXJzID0gKCkgPT4ge1xyXG4gIFxyXG4gIGNsZWFySW50ZXJ2YWwoIGludGVydmFsTGlzdGVuQ2hvaWNlRW5lbXkgKVxyXG4gIGludGVydmFsTGlzdGVuQ2hvaWNlRW5lbXkgPSBudWxsICAgIFxyXG4gIGNsZWFyVGltZW91dCggdGltZXJVcGRhdGVHYW1lUmVzdWx0IClcclxuICB0aW1lclVwZGF0ZUdhbWVSZXN1bHQgPSBudWxsICAgIFxyXG4gIGNsZWFyVGltZW91dCggdGltZXJSb3VuZCApXHJcbiAgdGltZXJSb3VuZCA9IG51bGwgICAgICAgIFxyXG59IFxyXG5cclxuXHJcbmNvbnN0IG5leHRSb3VuZCA9ICgpID0+IHtcclxuICBcclxuICBjbGllbnQuc2VuZFJlYWR5Rm9yTmV4dFJvdW5kKCggc2VydmVyUmVzdWx0ICkgPT4ge1xyXG4gICAgY2xlYXJBbGxUaW1lcnMoKSAgXHJcbiAgICBjdHgucmVtb3ZlUGxheWVyc0Nob2ljZXMoKVxyXG4gICAgdWkucmVkcmF3Q2hvaWNlQnV0dG9ucyggJ3Nob3cnICkgICAgXHJcbiAgICBpZiAoIHNlcnZlclJlc3VsdC5zdGF0ZSA9PT0gJ3BsYXknIHx8IHNlcnZlclJlc3VsdC5zdGF0ZSA9PT0gJ3dhaXRfcmVhZHknICkge1xyXG4gICAgICBzdGFydFJvdW5kKClcclxuICAgICAgcmV0dXJuXHRcdFxyXG4gICAgfVxyXG4gICAgaWYgKCBzZXJ2ZXJSZXN1bHQuc3RhdGUgPT09ICd3YWl0X2ZhdGFsaXR5JykgeyBcclxuICAgICAgc3RhcnRGYXRhbGl0eSggc2VydmVyUmVzdWx0IClcclxuICAgICAgcmV0dXJuIFxyXG4gICAgfSAgICAgXHJcbiAgICBpZiAoIHNlcnZlclJlc3VsdC5zdGF0ZSA9PT0gJ292ZXInIHx8IHNlcnZlclJlc3VsdC5zdGF0ZSA9PT0gJ2ZhdGFsaXR5JyApIHtcclxuICAgICAgZW5kQmF0dGxlKClcclxuICAgICAgcmV0dXJuXHJcbiAgICB9XHJcbiAgfSlcclxufVxyXG5cclxuICBcclxuLyoqIEZVTkNUSU9OUyBFTkQgR0FNRSAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG5cclxuY29uc3QgZHJhd0VuZW15RGlzY29ubmVjdGlvbiA9ICgpID0+IHtcclxuXHJcbiAgY2xpZW50LnBvc3RFbmVteUlzRGlzY29ubmVjdGVkKClcclxuICB1aS5zZXRNZXNzYWdlKCdFTkVNWSBSVU4gRlJPTSBCQVRUTEU8YnIvPllvdSBXSU4gIScpXHJcbiAgdWkuaGlkZUJ1dHRvbnNDaG9pY2UoKVxyXG4gIGN0eC5zdG9wQW5pbWF0aW9uS3VsYWsoIHRydWUsIHRydWUgKVxyXG4gIGN0eC5yZW1vdmVBbmltYXRpb25LdWxhayggdHJ1ZSwgdHJ1ZSApICBcclxuICBjdHgucmVtb3ZlUGxheWVyc0Nob2ljZXMoKSAgXHJcbiAgY3R4LmFkZEdvb2RTaWduKCB0cnVlLCBmYWxzZSApICAgIFxyXG4gIGVuZEJhdHRsZSgpICAgXHJcbn0gXHJcblxyXG5cclxuY29uc3Qgc3RhcnRGYXRhbGl0eSA9ICggc2VydmVyUmVzdWx0ICkgPT4ge1xyXG4gIFxyXG4gIGdhbWVTdGF0dXMgPSAnd2FpdC1jaG9pY2UtZmF0YWxpdHknXHJcbiAgaWYgKCBzZXJ2ZXJSZXN1bHQud2lubmVyID09PSAnbWUnICkge1xyXG4gICAgXHJcbiAgICB1aS5zZXRNZXNzYWdlU3RhcnRGYXRhbGl0eSggJ21lJyApXHJcbiAgICB1aS5zaG93QnV0dG9uc0Nob2ljZSgpXHJcbiAgICBjdHguc3RhcnRBbmltYXRpb25XYWl0KCB0cnVlLCBmYWxzZSApXHJcbiAgICBjdHguc3RhcnRBbmltYXRpb25Db21hKCBmYWxzZSwgdHJ1ZSApXHJcbiAgICBcclxuICAgIG1ha2VIYXNoRmF0YWxpdHkoKVxyXG5cclxuICAgIHRpbWVyRW5kRmF0YWxpdHkgPSBzZXRUaW1lb3V0KCAoKSA9PiB7IFxyXG4gICAgICBwb3N0V2lubmVyUmVzdWx0RmF0YWxpdHkoICdtaXNzJyApIFxyXG4gICAgfSwgODAwMCApICAgIFxyXG4gIH1cclxuICBpZiAoIHNlcnZlclJlc3VsdC53aW5uZXIgPT09ICdlbmVteScgKSB7XHJcblxyXG4gICAgdWkuaGlkZUJ1dHRvbnNDaG9pY2UoKSAgXHJcbiAgICB1aS5zZXRNZXNzYWdlU3RhcnRGYXRhbGl0eSggJ2VuZW15JyApXHJcbiAgICBjdHguc3RhcnRBbmltYXRpb25XYWl0KCBmYWxzZSwgdHJ1ZSApXHJcbiAgICBjdHguc3RhcnRBbmltYXRpb25Db21hKCB0cnVlLCBmYWxzZSApICBcclxuICAgIFxyXG4gICAgbG9zZXJXYWl0UmVzdWx0RmF0YWxpdHkoKVxyXG5cclxuICAgIHRpbWVyRW5kRmF0YWxpdHkgPSBzZXRUaW1lb3V0KCAoKSA9PiB7IGVuZEZhdGFsaXR5KCkgfSwgMTQwMDAgKSAgICBcclxuICB9XHJcbn1cclxuICBcclxuICBcclxuY29uc3QgbWFrZUhhc2hGYXRhbGl0eSA9ICgpID0+IHtcclxuXHJcbiAgcmFuZG9tRmF0YWxpdHlIYXNoID0gW11cclxuICBmb3IgKCBsZXQgaSA9IDA7IGkgPCA1OyBpICsrICkge1xyXG4gICAgbGV0IG4gPSBNYXRoLmZsb29yKCBNYXRoLnJhbmRvbSgpKjMgKVxyXG4gICAgaWYgKCBuID09IDAgKSB7IHNldFZhbHVlSW5IYXNoKCAnc3RvbmUnICkgfVxyXG4gICAgaWYgKCBuID09IDEgKSB7IHNldFZhbHVlSW5IYXNoKCAnc2Npc3NvcnMnICkgfVxyXG4gICAgaWYgKCBuID09IDIgKSB7IHNldFZhbHVlSW5IYXNoKCAncGFwZXInIClcdH1cdFx0XHRcdFx0XHJcbiAgfVxyXG59XHJcblxyXG5cclxuY29uc3Qgc2V0VmFsdWVJbkhhc2ggPSB2YWx1ZSA9PiB7XHJcblxyXG4gIHJhbmRvbUZhdGFsaXR5SGFzaC5wdXNoKCB2YWx1ZSApXHJcbiAgdWkuYWRkVmFsdWVGYXRhbGl0eSggdmFsdWUgKSBcclxufSAgICBcclxuICBcclxuICBcclxuY29uc3QgY2hlY2tGYXRhbGl0eURvbmUgPSBjaG9pY2UgPT4ge1xyXG5cclxuICBpZiAoIGNob2ljZSA9PSByYW5kb21GYXRhbGl0eUhhc2hbMF0gKSB7XHRcdFxyXG4gICAgcmFuZG9tRmF0YWxpdHlIYXNoLnNwbGljZSggMCwgMSApO1xyXG4gICAgaWYgKCByYW5kb21GYXRhbGl0eUhhc2gubGVuZ3RoID09IDAgKSB7XHJcbiAgICAgIHBvc3RXaW5uZXJSZXN1bHRGYXRhbGl0eSggJ2RvbmUnIClcclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgcG9zdFdpbm5lclJlc3VsdEZhdGFsaXR5KCAnbWlzcycgKSAgICAgIFxyXG4gIH1cdCBcdFx0XHQgICBcdFxyXG59XHJcbiAgXHJcbiAgXHJcbmNvbnN0IHBvc3RXaW5uZXJSZXN1bHRGYXRhbGl0eSA9IHJlc3VsdEZhdGFsaXR5ID0+IHtcclxuXHJcbiAgY2xpZW50LnBvc3RXaW5uZXJSZXN1bHRGYXRhbGl0eSggcmVzdWx0RmF0YWxpdHksICggc2VydmVyUmVzdWx0ICkgPT4ge1xyXG4gICAgZW5kRmF0YWxpdHkoIHNlcnZlclJlc3VsdCApXHJcbiAgfSlcclxufVxyXG4gIFxyXG4gICAgXHJcbmNvbnN0IGxvc2VyV2FpdFJlc3VsdEZhdGFsaXR5ID0gKCkgPT4ge1xyXG5cclxuICBjbGllbnQubG9zZXJXYWl0UmVzdWx0RmF0YWxpdHkoKCBzZXJ2ZXJSZXN1bHQgKSA9PiB7XHJcbiAgICBpZiAoIHNlcnZlclJlc3VsdC5mYXRhbGl0eSA9PSAnbm9uZScgKSB7XHJcbiAgICAgIHNldFRpbWVvdXQoIGxvc2VyV2FpdFJlc3VsdEZhdGFsaXR5LCAzMDAgKVxyXG4gICAgfSBcclxuICAgIGlmICggc2VydmVyUmVzdWx0LmZhdGFsaXR5ICE9ICdub25lJyApIHtcclxuICAgICAgZW5kRmF0YWxpdHkoIHNlcnZlclJlc3VsdCApXHRcclxuICAgIH1cdCAgICAgIFxyXG4gIH0pIFxyXG59ICBcclxuXHJcblxyXG5jb25zdCBlbmRGYXRhbGl0eSA9IHNlcnZlclJlc3VsdCA9PiB7XHJcblxyXG4gIGlmICggdGltZXJFbmRGYXRhbGl0eSAhPT0gbnVsbCApIHtcclxuICAgIGNsZWFyVGltZW91dCggdGltZXJFbmRGYXRhbGl0eSApXHJcbiAgICB0aW1lckVuZEZhdGFsaXR5ID0gbnVsbCAgICAgXHJcbiAgfVxyXG4gIGN0eC5yZW1vdmVBbmltYXRpb25XYWl0KCB0cnVlLCB0cnVlIClcclxuICBjdHguc3RvcEFuaW1hdGlvbkNvbWEoIHRydWUsIHRydWUgKVxyXG4gIHVpLmhpZGVCdXR0b25zQ2hvaWNlKClcclxuICBpZiAoIHNlcnZlclJlc3VsdCApIHsgICAgIFxyXG4gICAgaWYgKCBzZXJ2ZXJSZXN1bHQud2lubmVyID09ICdtZScgJiYgc2VydmVyUmVzdWx0LmZhdGFsaXR5ID09ICdkb25lJyApIHtcclxuICAgICAgY3R4LnN0YXJ0QW5pbWF0aW9uRmF0YWxpdHkoIHRydWUgKVxyXG4gICAgfVxyXG4gICAgaWYgKCBzZXJ2ZXJSZXN1bHQud2lubmVyID09ICdtZScgJiYgc2VydmVyUmVzdWx0LmZhdGFsaXR5ID09ICdtaXNzJyApIHtcclxuICAgICAgY3R4LmFkZEJhZFNpZ24oIHRydWUsIGZhbHNlIClcclxuICAgICAgY3R4LmFkZEdvb2RTaWduKCBmYWxzZSwgdHJ1ZSApICAgICAgXHJcbiAgICB9ICBcclxuICAgIGlmICggc2VydmVyUmVzdWx0Lndpbm5lciA9PSAnZW5lbXknICYmIHNlcnZlclJlc3VsdC5mYXRhbGl0eSA9PSAnZG9uZScgKSB7IFxyXG4gICAgICBjdHguc3RhcnRBbmltYXRpb25GYXRhbGl0eSggZmFsc2UgKSAgICAgIFxyXG4gICAgfSAgICBcclxuICAgIGlmICggc2VydmVyUmVzdWx0Lndpbm5lciA9PSAnZW5lbXknICYmIHNlcnZlclJlc3VsdC5mYXRhbGl0eSA9PSAnbWlzcycgKSB7ICAgICAgXHJcbiAgICAgIGN0eC5hZGRCYWRTaWduKCBmYWxzZSwgdHJ1ZSApXHJcbiAgICAgIGN0eC5hZGRHb29kU2lnbiggdHJ1ZSwgZmFsc2UgKSAgICAgICBcclxuICAgIH1cclxuICB9XHJcbiAgaWYgKCAhIHNlcnZlclJlc3VsdCApIHtcclxuICAgICBjdHguYWRkQmFkU2lnbiggZmFsc2UsIHRydWUgKVxyXG4gICAgIGN0eC5hZGRHb29kU2lnbiggdHJ1ZSwgZmFsc2UgKSAgICAgICAgXHJcbiAgfVxyXG4gIHVpLnJlbW92ZUZhdGFsaXR5QmFyKClcclxuICBlbmRCYXR0bGUoKSAgXHJcbn1cclxuICBcclxuXHJcbmNvbnN0IGVuZEJhdHRsZSA9ICgpID0+IHNldFRpbWVvdXQoIGNsZWFyRW5lbXlGcm9tU2NyZWVuLCAyMDAwICkgXHJcbiAgXHJcbiAgXHJcbmNvbnN0IGNsZWFyRW5lbXlGcm9tU2NyZWVuID0gKCkgPT4ge1xyXG5cclxuICBnYW1lU3RhdHVzID0gJ25vbmUnXHJcbiAgY3R4LnJlbW92ZUdvb2RTaWduKCBmYWxzZSwgdHJ1ZSApXHJcbiAgY3R4LnJlbW92ZUJhZFNpZ24oIGZhbHNlLCB0cnVlIClcclxuICB1aS5zaG93QnV0dG9uU2VhcmNoKCkgIFxyXG4gIGNvbm5lY3RGaXJzdCgpIFxyXG59IFxyXG5cclxuLyoqIFJFU0laRSBXSURET1cgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG5jb25zdCByZWNrb25XaW5kb3dTaXplID0gKCkgPT4ge1xyXG4gIGN0eC5yZWNrb25XaW5kb3dTaXplKClcclxuICB1aS5yZXNpemVVaSgpXHJcbn1cclxuXHJcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCAncmVzaXplJywgcmVja29uV2luZG93U2l6ZSwgZmFsc2UgKVxyXG5cclxuLyoqIFNUQVJUIElOSVQgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG5cclxuaW5pdCgpXHJcblxyXG5cclxuIl0sIm5hbWVzIjpbInRpbWVyUm91bmQiLCJ0aW1lck1hcmdpbiIsInRpbWVyV2lkdGgiLCJVaSIsImludGVydmFsQW5pbWF0aW9uIiwicm91bmQiLCIkIiwiYXBwZW5kVG8iLCJoaWRlIiwiaGlkZUJ1dHRvblNlYXJjaCIsImhpZGVCdXR0b25zQ2hvaWNlIiwicmVzaXplVWkiLCJoIiwid2luZG93IiwiaW5uZXJIZWlnaHQiLCJzdGVwIiwiY3NzIiwidXBkYXRlR2FtZSIsInNob3ciLCJjbGljayIsInJlbW92ZSIsIm5hbWUiLCJodG1sIiwidCIsImRlbFJvdW5kIiwiYW5pbWF0aW9uUm91bmRUaW1lciIsImlzUmVkcmF3QnV0dG9ucyIsImUiLCJyZWRyYXdDaG9pY2VCdXR0b25zIiwidGFyZ2V0IiwidmFsdWUiLCJ2YWxsIiwiY2xlYXJUaW1lb3V0IiwibGFzdFJvdW5kUmVzdWx0Iiwic3RvcEFuaW1hdGlvblJvdW5kVGltZXIiLCJteUNob2ljZSIsImdldENoaW9jZVBpY3QiLCJlbkNob2ljZSIsImVuZW15Q2hvaWNlIiwiZ2V0QmFja0NvbG9yIiwid2lubmVyIiwidiIsInZhbCIsIm1lc3MiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiaW5uZXJIVE1MIiwiYXBwZW5kIiwibSIsInNldFRpbWVvdXQiLCJDbGllbnQiLCJyZXNwb25zZUVycm9yIiwiZ2V0IiwiZmFpbCIsImRvbmUiLCJyZXN1bHQiLCJwb3N0IiwidGhlbiIsInJlc3VsdHMiLCJjaG9pY2UiLCJyZXN1bHRGYXRhbGl0eSIsImZ1bmMiLCJyZW5kZXJlciIsIkN0eCIsIlBJWEkiLCJDYW52YXNSZW5kZXJlciIsImJvZHkiLCJhcHBlbmRDaGlsZCIsInZpZXciLCJpZCIsInN0YWdlIiwiU3RhZ2UiLCJzY2FsZSIsImN1cnJlbnRTcHJpdGVIZXJvIiwiY3VycmVudFNwcml0ZUVuZW15IiwicmVja29uV2luZG93U2l6ZSIsIm9uSW5pdCIsImxvYWRlciIsImFkZCIsImxvYWQiLCJpbml0QW5pbWF0aW9uIiwicG9zWEhlcm8iLCJwb3NZSGVybyIsInBvc1hFbmVteSIsInBvc1lFbmVteSIsImZyYW1lc1dhaXQiLCJpIiwicHVzaCIsIlRleHR1cmUiLCJmcm9tRnJhbWUiLCJ3YWl0SGVybyIsImV4dHJhcyIsIkFuaW1hdGVkU3ByaXRlIiwieCIsInkiLCJzZXQiLCJhbmNob3IiLCJhbmltYXRpb25TcGVlZCIsIndhaXRFbmVteSIsInJvdGF0aW9uIiwiTWF0aCIsIlBJIiwiZnJhbWVzQ29tYSIsImNvbWFIZXJvIiwiY29tYUVuZW15IiwiZnJhbWVzS3VsYWsiLCJrdWxha0hlcm8iLCJrdWxha0VuZW15IiwiZnJhbWVzU3RvbmUiLCJzdG9uZUhlcm8iLCJsb29wIiwic3RvbmVFbmVteSIsImZyYW1lc1BhcGVyIiwicGFwZXJIZXJvIiwicGFwZXJFbmVteSIsImZyYW1lc1NjaXNzb3JzIiwic2Npc3NvcnNIZXJvIiwic2Npc3NvcnNFbmVteSIsImdvb2RTaWduRnJhbWUiLCJzaWduSGVyb0dvb2QiLCJzaWduRW5lbXlHb29kIiwiYmFkU2lnbkZyYW1lIiwic2lnbkhlcm9CYWQiLCJzaWduRW5lbXlCYWQiLCJmcmFtZXNGYXRhbGl0eSIsImZhdGFsaXR5IiwibCIsInN0eWxlIiwiaGVpZ2h0Iiwid2lkdGgiLCJyZXNpemUiLCJzZXRTcHJpdGVYWVNjYWxlIiwiZ290b0FuZFN0b3AiLCJhZGRDaGlsZCIsInJlbW92ZUNoaWxkIiwiaGVybyIsImVuZW15IiwicGxheSIsInN0b3AiLCJjYW52YXNSZWFkeSIsImFkZEdvb2RTaWduIiwiY2FudmFzUmVhZHlUb0ZpZ2h0IiwicmVtb3ZlR29vZFNpZ24iLCJmbG9vciIsInJhbmRvbSIsImNob2ljZXMiLCJyZW1vdmVBbmltYXRpb25LdWxhayIsImdldFNwcml0ZSIsImlzU3ByaXRlUGxheSIsInNwIiwibm9Sb3RhdGlvbiIsImdvdG9BbmRQbGF5IiwicmVuZGVyIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiZHJhd0ZyYW1lIiwib2IiLCJzYyIsInVpIiwiY2xpZW50IiwiY3R4IiwiaW50ZXJ2YWxMaXN0ZW5DaG9pY2VFbmVteSIsInRpbWVyVXBkYXRlR2FtZVJlc3VsdCIsInRpbWVyRW5kRmF0YWxpdHkiLCJnYW1lU3RhdHVzIiwicmFuZG9tRmF0YWxpdHlIYXNoIiwiZ29vdXRCcm93c2VyVGltZSIsImluaXQiLCJQcm9taXNlIiwicmVzb2x2ZSIsImxvYWRBc3NldHMiLCJzZXRTdGFydFNpZ24iLCJpbml0QnV0dG9uU2VhcmNoRW5lbXkiLCJpbml0QnV0dG9uc0Nob2ljZUhlcm8iLCJpbml0RXJyb3JDb25uZWN0aW9uIiwiaW5pdEdvb3V0QnJvd3NlclRhYkVycm9yIiwicmVtb3ZlU3RhcnRMb2FkZXIiLCJpbml0U3RhcnRCdXR0b24iLCJjb25uZWN0Rmlyc3QiLCJzZXRGdW5jdGlvblJlc3BvbnNlRXJyb3IiLCJzZXRNZXNzYWdlIiwiY2xlYXJFcnJvclNjcmVlbiIsIm9uYmx1ciIsIkRhdGUiLCJvbmZvY3VzIiwic2hvd0J1dHRvblNlYXJjaCIsInJlbW92ZUJhZFNpZ24iLCJyZW1vdmVBbmltYXRpb25XYWl0IiwicmVtb3ZlUGxheWVyc0Nob2ljZXMiLCJyZW1vdmVBbmltYXRpb25GYXRhbGl0eSIsImNsZWFyQWxsVGltZXJzIiwiZW5kQmF0dGxlIiwicmVtb3ZlU3RhcnRTY3JlZW4iLCJjbGlja0J1dHRvblNlYXJjaEVuZW15IiwicmVtb3ZlU3RhcnRTaWduIiwic3RhcnRBbmltYXRpb25XYWl0IiwiY2xlYXJTY3JlZW4iLCJhcGlGaW5kRW5lbXkiLCJnZXRTaWduSWZDb25uZWN0Rmlyc3QiLCJzZXJ2ZXJSZXN1bHQiLCJzZXRDb25uZWN0aW9uTWVzc2FnZSIsInNlbmRTaWduVG9GaW5kRW5lbXkiLCJzdGF0ZSIsIm1lZXRpbmdQbGF5ZXJzIiwiZ2V0U2lnbkFib3V0VXBkYXRlR2FtZVJlc3VsdCIsInNldE1lc3NhZ2VTZWFyY2hFbmVteSIsInByZXBlYXJDYW52YXNUb0ZpZ2h0Iiwic3RhcnRSb3VuZCIsInN0YXJ0QW5pbWF0aW9uUm91bmRUaW1lciIsInNob3dCdXR0b25zQ2hvaWNlIiwic3RhcnRBbmltYXRpb25LdWxhayIsInNldEludGVydmFsIiwid2FpdEVuZW15Q2hvaWNlIiwiZW5kVGltZXJSb3VuZCIsImVuZW15TWFkZUNob2ljZSIsInN0b3BBbmltYXRpb25LdWxhayIsImNsZWFySW50ZXJ2YWwiLCJjbGlja0J1dHRvbnNDaG9pY2VIZXJvIiwic2VuZEhlcm9DaG9pY2UiLCJjaGVja0ZhdGFsaXR5RG9uZSIsImlzVXBkYWRlQnV0dG9uc0ltZ3MiLCJ1cGRhdGVHYW1lUmVzdWx0IiwiZHJhd0VuZW15RGlzY29ubmVjdGlvbiIsImRyYXdSb3VuZFJlc3VsdCIsImxlbmd0aCIsImRyYXdQbGF5ZXJzQ2hvaWNlcyIsIm5leHRSb3VuZCIsInNlbmRSZWFkeUZvck5leHRSb3VuZCIsInN0YXJ0RmF0YWxpdHkiLCJwb3N0RW5lbXlJc0Rpc2Nvbm5lY3RlZCIsInNldE1lc3NhZ2VTdGFydEZhdGFsaXR5Iiwic3RhcnRBbmltYXRpb25Db21hIiwibWFrZUhhc2hGYXRhbGl0eSIsInBvc3RXaW5uZXJSZXN1bHRGYXRhbGl0eSIsImxvc2VyV2FpdFJlc3VsdEZhdGFsaXR5IiwiZW5kRmF0YWxpdHkiLCJuIiwic2V0VmFsdWVJbkhhc2giLCJhZGRWYWx1ZUZhdGFsaXR5Iiwic3BsaWNlIiwic3RvcEFuaW1hdGlvbkNvbWEiLCJzdGFydEFuaW1hdGlvbkZhdGFsaXR5IiwiYWRkQmFkU2lnbiIsInJlbW92ZUZhdGFsaXR5QmFyIiwiY2xlYXJFbmVteUZyb21TY3JlZW4iLCJhZGRFdmVudExpc3RlbmVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7RUFrQkEsSUFBSUEsYUFBYSxJQUFqQjtFQUFBLElBQ0FDLGNBQWMsSUFEZDtFQUFBLElBRUFDLGFBQWEsSUFGYjs7TUFJTUM7O0VBRUo7O0VBRUEsZ0JBQWM7RUFBQTs7RUFDWixTQUFLQyxpQkFBTCxHQUF5QixJQUF6QjtFQUNBLFNBQUtDLEtBQUwsR0FBYSxDQUFiO0VBQ0Q7Ozs7NkJBRU07RUFDTEMsUUFBRyw0QkFBSCxFQUFpQ0MsUUFBakMsQ0FBMkMsTUFBM0M7RUFDQUQsUUFBRywrQkFBSCxFQUFxQ0MsUUFBckMsQ0FBK0MsWUFBL0M7RUFDQUQsUUFBRyx3QkFBSCxFQUE4QkMsUUFBOUIsQ0FBd0MsZUFBeEM7RUFDQUQsUUFBRyxpREFBSCxFQUF1REMsUUFBdkQsQ0FBaUUsUUFBakU7RUFDQUQsUUFBRyxrREFBSCxFQUF3REMsUUFBeEQsQ0FBa0UsUUFBbEU7RUFDQUQsUUFBRyx5QkFBSCxFQUE4QkMsUUFBOUIsQ0FBd0MsUUFBeEM7RUFDQUQsUUFBRyx5QkFBSCxFQUE4QkMsUUFBOUIsQ0FBd0MsUUFBeEM7RUFDQUQsUUFBRywyQkFBSCxFQUFnQ0MsUUFBaEMsQ0FBMEMsUUFBMUM7O0VBRUFELFFBQUcsc0NBQUgsRUFBNENDLFFBQTVDLENBQXNELE1BQXREOztFQUVBRCxRQUFHLG9DQUFILEVBQTBDQyxRQUExQyxDQUFvRCxzQkFBcEQ7RUFDQUQsUUFBRyxjQUFILEVBQW9CRSxJQUFwQjs7RUFFQUYsUUFBRyxxQ0FBSCxFQUEyQ0MsUUFBM0MsQ0FBcUQsc0JBQXJEO0VBQ0FELFFBQUcsb0NBQUgsRUFBMENDLFFBQTFDLENBQW9ELGVBQXBE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
